ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"togglelib.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	Morse_Sequence,21,4
  18              		.comm	Binary_Sequence,21,4
  19              		.comm	Substitution_Sequence,21,4
  20              		.comm	Organizer_Sequence,21,4
  21              		.section	.text.SWL_Handler,"ax",%progbits
  22              		.align	2
  23              		.global	SWL_Handler
  24              		.code	16
  25              		.thumb_func
  26              		.type	SWL_Handler, %function
  27              	SWL_Handler:
  28              	.LFB33:
  29              		.file 1 ".\\togglelib.c"
   1:.\togglelib.c **** /* ========================================
   2:.\togglelib.c ****  *
   3:.\togglelib.c ****  * Copyright Nullify, 2016
   4:.\togglelib.c ****  * All Rights Reserved
   5:.\togglelib.c ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\togglelib.c ****  *
   7:.\togglelib.c ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\togglelib.c ****  * WHICH IS THE PROPERTY OF NULLIY.
   9:.\togglelib.c ****  *
  10:.\togglelib.c ****  * ========================================
  11:.\togglelib.c **** */
  12:.\togglelib.c **** #include <project.h>
  13:.\togglelib.c **** #include <stdio.h>
  14:.\togglelib.c **** #include <time.h>
  15:.\togglelib.c **** #include <stdlib.h>
  16:.\togglelib.c **** #include "lightlib.h"
  17:.\togglelib.c **** #include "togglelib.h"
  18:.\togglelib.c **** #include "state.h"
  19:.\togglelib.c **** 
  20:.\togglelib.c **** /* Global Structures used to signal state change for badge  */
  21:.\togglelib.c **** volatile struct Magic_Toggle_Sequence Morse_Sequence;
  22:.\togglelib.c **** volatile struct Magic_Toggle_Sequence Binary_Sequence;
  23:.\togglelib.c **** volatile struct Magic_Toggle_Sequence Substitution_Sequence;
  24:.\togglelib.c **** volatile struct Magic_Toggle_Sequence Organizer_Sequence;
  25:.\togglelib.c **** 
  26:.\togglelib.c **** /* Signal handler for left toggle press */
  27:.\togglelib.c **** CY_ISR( SWL_Handler ) {
  30              		.loc 1 27 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 2


  31              		.cfi_startproc
  32 0000 90B5     		push	{r4, r7, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  28:.\togglelib.c ****     uint8* sequance; 
  29:.\togglelib.c ****     uint8 index;
  30:.\togglelib.c ****     
  31:.\togglelib.c ****     /* Determine what state the badge is currently in */
  32:.\togglelib.c ****     switch(badge_state) {
  41              		.loc 1 32 0
  42 0006 6F4B     		ldr	r3, .L20
  43 0008 1B78     		ldrb	r3, [r3]
  44 000a DBB2     		uxtb	r3, r3
  45 000c 022B     		cmp	r3, #2
  46 000e 3AD0     		beq	.L3
  47 0010 02DC     		bgt	.L4
  48 0012 012B     		cmp	r3, #1
  49 0014 06D0     		beq	.L5
  50 0016 CDE0     		b	.L2
  51              	.L4:
  52 0018 032B     		cmp	r3, #3
  53 001a 65D0     		beq	.L6
  54 001c 042B     		cmp	r3, #4
  55 001e 00D1     		bne	.LCB29
  56 0020 95E0     		b	.L7	@long jump
  57              	.LCB29:
  58 0022 C7E0     		b	.L2
  59              	.L5:
  33:.\togglelib.c ****         case MORSE:
  34:.\togglelib.c ****             sequance = get_magic_toggle_sequance(BINARY);
  60              		.loc 1 34 0
  61 0024 0220     		mov	r0, #2
  62 0026 FFF7FEFF 		bl	get_magic_toggle_sequance
  63 002a 031C     		mov	r3, r0
  64 002c 3B60     		str	r3, [r7]
  35:.\togglelib.c ****             index = get_magic_toggle_index(BINARY);
  65              		.loc 1 35 0
  66 002e FC1D     		add	r4, r7, #7
  67 0030 0220     		mov	r0, #2
  68 0032 FFF7FEFF 		bl	get_magic_toggle_index
  69 0036 031C     		mov	r3, r0
  70 0038 2370     		strb	r3, [r4]
  36:.\togglelib.c ****             
  37:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
  38:.\togglelib.c ****             if (sequance[index] == LEFT_TOGGLE) {
  71              		.loc 1 38 0
  72 003a FB1D     		add	r3, r7, #7
  73 003c 1B78     		ldrb	r3, [r3]
  74 003e 3A68     		ldr	r2, [r7]
  75 0040 D318     		add	r3, r2, r3
  76 0042 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 3


  77 0044 012B     		cmp	r3, #1
  78 0046 05D1     		bne	.L8
  39:.\togglelib.c ****                 index += 1;
  79              		.loc 1 39 0
  80 0048 FB1D     		add	r3, r7, #7
  81 004a FA1D     		add	r2, r7, #7
  82 004c 1278     		ldrb	r2, [r2]
  83 004e 0132     		add	r2, r2, #1
  84 0050 1A70     		strb	r2, [r3]
  85 0052 02E0     		b	.L9
  86              	.L8:
  40:.\togglelib.c ****             }
  41:.\togglelib.c ****             else {
  42:.\togglelib.c ****                 index = 0;
  87              		.loc 1 42 0
  88 0054 FB1D     		add	r3, r7, #7
  89 0056 0022     		mov	r2, #0
  90 0058 1A70     		strb	r2, [r3]
  91              	.L9:
  43:.\togglelib.c ****             }
  44:.\togglelib.c ****                    
  45:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
  46:.\togglelib.c ****            if (index == strlen(sequance)){
  92              		.loc 1 46 0
  93 005a FB1D     		add	r3, r7, #7
  94 005c 1C78     		ldrb	r4, [r3]
  95 005e 3B68     		ldr	r3, [r7]
  96 0060 181C     		mov	r0, r3
  97 0062 FFF7FEFF 		bl	strlen
  98 0066 031C     		mov	r3, r0
  99 0068 9C42     		cmp	r4, r3
 100 006a 05D1     		bne	.L10
  47:.\togglelib.c ****             badge_state = BINARY;
 101              		.loc 1 47 0
 102 006c 554B     		ldr	r3, .L20
 103 006e 0222     		mov	r2, #2
 104 0070 1A70     		strb	r2, [r3]
  48:.\togglelib.c ****             index = 0;
 105              		.loc 1 48 0
 106 0072 FB1D     		add	r3, r7, #7
 107 0074 0022     		mov	r2, #0
 108 0076 1A70     		strb	r2, [r3]
 109              	.L10:
  49:.\togglelib.c ****            }
  50:.\togglelib.c ****         
  51:.\togglelib.c ****            /* Update the value in the toggle struct */
  52:.\togglelib.c ****             set_magic_toggle_index(BINARY, index);
 110              		.loc 1 52 0
 111 0078 FB1D     		add	r3, r7, #7
 112 007a 1B78     		ldrb	r3, [r3]
 113 007c 0220     		mov	r0, #2
 114 007e 191C     		mov	r1, r3
 115 0080 FFF7FEFF 		bl	set_magic_toggle_index
  53:.\togglelib.c ****         break;
 116              		.loc 1 53 0
 117 0084 96E0     		b	.L2
 118              	.L3:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 4


  54:.\togglelib.c ****         case BINARY:
  55:.\togglelib.c ****             sequance = get_magic_toggle_sequance(SUBSTITUTION);
 119              		.loc 1 55 0
 120 0086 0320     		mov	r0, #3
 121 0088 FFF7FEFF 		bl	get_magic_toggle_sequance
 122 008c 031C     		mov	r3, r0
 123 008e 3B60     		str	r3, [r7]
  56:.\togglelib.c ****             index = get_magic_toggle_index(SUBSTITUTION);
 124              		.loc 1 56 0
 125 0090 FC1D     		add	r4, r7, #7
 126 0092 0320     		mov	r0, #3
 127 0094 FFF7FEFF 		bl	get_magic_toggle_index
 128 0098 031C     		mov	r3, r0
 129 009a 2370     		strb	r3, [r4]
  57:.\togglelib.c ****             
  58:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
  59:.\togglelib.c ****             if (sequance[index] == LEFT_TOGGLE) {
 130              		.loc 1 59 0
 131 009c FB1D     		add	r3, r7, #7
 132 009e 1B78     		ldrb	r3, [r3]
 133 00a0 3A68     		ldr	r2, [r7]
 134 00a2 D318     		add	r3, r2, r3
 135 00a4 1B78     		ldrb	r3, [r3]
 136 00a6 012B     		cmp	r3, #1
 137 00a8 05D1     		bne	.L11
  60:.\togglelib.c ****                 index += 1;
 138              		.loc 1 60 0
 139 00aa FB1D     		add	r3, r7, #7
 140 00ac FA1D     		add	r2, r7, #7
 141 00ae 1278     		ldrb	r2, [r2]
 142 00b0 0132     		add	r2, r2, #1
 143 00b2 1A70     		strb	r2, [r3]
 144 00b4 02E0     		b	.L12
 145              	.L11:
  61:.\togglelib.c ****             }
  62:.\togglelib.c ****             else {
  63:.\togglelib.c ****                 index = 0;
 146              		.loc 1 63 0
 147 00b6 FB1D     		add	r3, r7, #7
 148 00b8 0022     		mov	r2, #0
 149 00ba 1A70     		strb	r2, [r3]
 150              	.L12:
  64:.\togglelib.c ****             }
  65:.\togglelib.c ****                    
  66:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
  67:.\togglelib.c ****            if (index == strlen(sequance)){
 151              		.loc 1 67 0
 152 00bc FB1D     		add	r3, r7, #7
 153 00be 1C78     		ldrb	r4, [r3]
 154 00c0 3B68     		ldr	r3, [r7]
 155 00c2 181C     		mov	r0, r3
 156 00c4 FFF7FEFF 		bl	strlen
 157 00c8 031C     		mov	r3, r0
 158 00ca 9C42     		cmp	r4, r3
 159 00cc 05D1     		bne	.L13
  68:.\togglelib.c ****             badge_state = SUBSTITUTION;
 160              		.loc 1 68 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 5


 161 00ce 3D4B     		ldr	r3, .L20
 162 00d0 0322     		mov	r2, #3
 163 00d2 1A70     		strb	r2, [r3]
  69:.\togglelib.c ****             index = 0;
 164              		.loc 1 69 0
 165 00d4 FB1D     		add	r3, r7, #7
 166 00d6 0022     		mov	r2, #0
 167 00d8 1A70     		strb	r2, [r3]
 168              	.L13:
  70:.\togglelib.c ****            }
  71:.\togglelib.c ****         
  72:.\togglelib.c ****            /* Update the value in the toggle struct */
  73:.\togglelib.c ****             set_magic_toggle_index(SUBSTITUTION, index);
 169              		.loc 1 73 0
 170 00da FB1D     		add	r3, r7, #7
 171 00dc 1B78     		ldrb	r3, [r3]
 172 00de 0320     		mov	r0, #3
 173 00e0 191C     		mov	r1, r3
 174 00e2 FFF7FEFF 		bl	set_magic_toggle_index
  74:.\togglelib.c ****         break;
 175              		.loc 1 74 0
 176 00e6 65E0     		b	.L2
 177              	.L6:
  75:.\togglelib.c ****         case SUBSTITUTION:
  76:.\togglelib.c ****             sequance = get_magic_toggle_sequance(ORGANIZER);
 178              		.loc 1 76 0
 179 00e8 0420     		mov	r0, #4
 180 00ea FFF7FEFF 		bl	get_magic_toggle_sequance
 181 00ee 031C     		mov	r3, r0
 182 00f0 3B60     		str	r3, [r7]
  77:.\togglelib.c ****             index = get_magic_toggle_index(ORGANIZER);
 183              		.loc 1 77 0
 184 00f2 FC1D     		add	r4, r7, #7
 185 00f4 0420     		mov	r0, #4
 186 00f6 FFF7FEFF 		bl	get_magic_toggle_index
 187 00fa 031C     		mov	r3, r0
 188 00fc 2370     		strb	r3, [r4]
  78:.\togglelib.c ****             
  79:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
  80:.\togglelib.c ****             if (sequance[index] == LEFT_TOGGLE) {
 189              		.loc 1 80 0
 190 00fe FB1D     		add	r3, r7, #7
 191 0100 1B78     		ldrb	r3, [r3]
 192 0102 3A68     		ldr	r2, [r7]
 193 0104 D318     		add	r3, r2, r3
 194 0106 1B78     		ldrb	r3, [r3]
 195 0108 012B     		cmp	r3, #1
 196 010a 05D1     		bne	.L14
  81:.\togglelib.c ****                 index += 1;
 197              		.loc 1 81 0
 198 010c FB1D     		add	r3, r7, #7
 199 010e FA1D     		add	r2, r7, #7
 200 0110 1278     		ldrb	r2, [r2]
 201 0112 0132     		add	r2, r2, #1
 202 0114 1A70     		strb	r2, [r3]
 203 0116 02E0     		b	.L15
 204              	.L14:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 6


  82:.\togglelib.c ****             }
  83:.\togglelib.c ****             else {
  84:.\togglelib.c ****                 index = 0;
 205              		.loc 1 84 0
 206 0118 FB1D     		add	r3, r7, #7
 207 011a 0022     		mov	r2, #0
 208 011c 1A70     		strb	r2, [r3]
 209              	.L15:
  85:.\togglelib.c ****             }
  86:.\togglelib.c ****                    
  87:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
  88:.\togglelib.c ****            if (index == strlen(sequance)){
 210              		.loc 1 88 0
 211 011e FB1D     		add	r3, r7, #7
 212 0120 1C78     		ldrb	r4, [r3]
 213 0122 3B68     		ldr	r3, [r7]
 214 0124 181C     		mov	r0, r3
 215 0126 FFF7FEFF 		bl	strlen
 216 012a 031C     		mov	r3, r0
 217 012c 9C42     		cmp	r4, r3
 218 012e 07D1     		bne	.L16
  89:.\togglelib.c ****             badge_state = ORGANIZER;
 219              		.loc 1 89 0
 220 0130 244B     		ldr	r3, .L20
 221 0132 0422     		mov	r2, #4
 222 0134 1A70     		strb	r2, [r3]
  90:.\togglelib.c ****             index = 0;
 223              		.loc 1 90 0
 224 0136 FB1D     		add	r3, r7, #7
 225 0138 0022     		mov	r2, #0
 226 013a 1A70     		strb	r2, [r3]
  91:.\togglelib.c ****             PWM_Organizer_Start();
 227              		.loc 1 91 0
 228 013c FFF7FEFF 		bl	PWM_Organizer_Start
 229              	.L16:
  92:.\togglelib.c ****            }
  93:.\togglelib.c ****         
  94:.\togglelib.c ****            /* Update the value in the toggle struct */
  95:.\togglelib.c ****             set_magic_toggle_index(ORGANIZER, index);
 230              		.loc 1 95 0
 231 0140 FB1D     		add	r3, r7, #7
 232 0142 1B78     		ldrb	r3, [r3]
 233 0144 0420     		mov	r0, #4
 234 0146 191C     		mov	r1, r3
 235 0148 FFF7FEFF 		bl	set_magic_toggle_index
  96:.\togglelib.c ****         break; 
 236              		.loc 1 96 0
 237 014c 32E0     		b	.L2
 238              	.L7:
  97:.\togglelib.c ****         case ORGANIZER:
  98:.\togglelib.c ****             sequance = get_magic_toggle_sequance(MORSE);
 239              		.loc 1 98 0
 240 014e 0120     		mov	r0, #1
 241 0150 FFF7FEFF 		bl	get_magic_toggle_sequance
 242 0154 031C     		mov	r3, r0
 243 0156 3B60     		str	r3, [r7]
  99:.\togglelib.c ****             index = get_magic_toggle_index(MORSE);
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 7


 244              		.loc 1 99 0
 245 0158 FC1D     		add	r4, r7, #7
 246 015a 0120     		mov	r0, #1
 247 015c FFF7FEFF 		bl	get_magic_toggle_index
 248 0160 031C     		mov	r3, r0
 249 0162 2370     		strb	r3, [r4]
 100:.\togglelib.c ****             
 101:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
 102:.\togglelib.c ****             if (sequance[index] == LEFT_TOGGLE) {
 250              		.loc 1 102 0
 251 0164 FB1D     		add	r3, r7, #7
 252 0166 1B78     		ldrb	r3, [r3]
 253 0168 3A68     		ldr	r2, [r7]
 254 016a D318     		add	r3, r2, r3
 255 016c 1B78     		ldrb	r3, [r3]
 256 016e 012B     		cmp	r3, #1
 257 0170 05D1     		bne	.L17
 103:.\togglelib.c ****                 index += 1;
 258              		.loc 1 103 0
 259 0172 FB1D     		add	r3, r7, #7
 260 0174 FA1D     		add	r2, r7, #7
 261 0176 1278     		ldrb	r2, [r2]
 262 0178 0132     		add	r2, r2, #1
 263 017a 1A70     		strb	r2, [r3]
 264 017c 02E0     		b	.L18
 265              	.L17:
 104:.\togglelib.c ****             }
 105:.\togglelib.c ****             else {
 106:.\togglelib.c ****                 index = 0;
 266              		.loc 1 106 0
 267 017e FB1D     		add	r3, r7, #7
 268 0180 0022     		mov	r2, #0
 269 0182 1A70     		strb	r2, [r3]
 270              	.L18:
 107:.\togglelib.c ****             }
 108:.\togglelib.c ****                    
 109:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
 110:.\togglelib.c ****            if (index == strlen(sequance)){
 271              		.loc 1 110 0
 272 0184 FB1D     		add	r3, r7, #7
 273 0186 1C78     		ldrb	r4, [r3]
 274 0188 3B68     		ldr	r3, [r7]
 275 018a 181C     		mov	r0, r3
 276 018c FFF7FEFF 		bl	strlen
 277 0190 031C     		mov	r3, r0
 278 0192 9C42     		cmp	r4, r3
 279 0194 07D1     		bne	.L19
 111:.\togglelib.c ****             badge_state = MORSE;
 280              		.loc 1 111 0
 281 0196 0B4B     		ldr	r3, .L20
 282 0198 0122     		mov	r2, #1
 283 019a 1A70     		strb	r2, [r3]
 112:.\togglelib.c ****             index = 0;
 284              		.loc 1 112 0
 285 019c FB1D     		add	r3, r7, #7
 286 019e 0022     		mov	r2, #0
 287 01a0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 8


 113:.\togglelib.c ****             PWM_Organizer_Stop();
 288              		.loc 1 113 0
 289 01a2 FFF7FEFF 		bl	PWM_Organizer_Stop
 290              	.L19:
 114:.\togglelib.c ****            }
 115:.\togglelib.c ****         
 116:.\togglelib.c ****            /* Update the value in the toggle struct */
 117:.\togglelib.c ****             set_magic_toggle_index(MORSE, index);
 291              		.loc 1 117 0
 292 01a6 FB1D     		add	r3, r7, #7
 293 01a8 1B78     		ldrb	r3, [r3]
 294 01aa 0120     		mov	r0, #1
 295 01ac 191C     		mov	r1, r3
 296 01ae FFF7FEFF 		bl	set_magic_toggle_index
 118:.\togglelib.c ****         break;    
 297              		.loc 1 118 0
 298 01b2 C046     		mov	r8, r8
 299              	.L2:
 119:.\togglelib.c ****     }
 120:.\togglelib.c ****     /* Delay for a long press and clear interrupt */
 121:.\togglelib.c ****     CyDelay(TOGGLE_DELAY);
 300              		.loc 1 121 0
 301 01b4 9620     		mov	r0, #150
 302 01b6 FFF7FEFF 		bl	CyDelay
 122:.\togglelib.c ****     SWL_ClearInterrupt();
 303              		.loc 1 122 0
 304 01ba FFF7FEFF 		bl	SWL_ClearInterrupt
 123:.\togglelib.c **** }
 305              		.loc 1 123 0
 306 01be BD46     		mov	sp, r7
 307 01c0 03B0     		add	sp, sp, #12
 308              		@ sp needed
 309 01c2 90BD     		pop	{r4, r7, pc}
 310              	.L21:
 311              		.align	2
 312              	.L20:
 313 01c4 00000000 		.word	badge_state
 314              		.cfi_endproc
 315              	.LFE33:
 316              		.size	SWL_Handler, .-SWL_Handler
 317              		.section	.text.SWR_Handler,"ax",%progbits
 318              		.align	2
 319              		.global	SWR_Handler
 320              		.code	16
 321              		.thumb_func
 322              		.type	SWR_Handler, %function
 323              	SWR_Handler:
 324              	.LFB34:
 124:.\togglelib.c **** 
 125:.\togglelib.c **** /* Signal handler for right toggle press */
 126:.\togglelib.c **** CY_ISR( SWR_Handler ) {
 325              		.loc 1 126 0
 326              		.cfi_startproc
 327 0000 90B5     		push	{r4, r7, lr}
 328              		.cfi_def_cfa_offset 12
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 7, -8
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 9


 331              		.cfi_offset 14, -4
 332 0002 83B0     		sub	sp, sp, #12
 333              		.cfi_def_cfa_offset 24
 334 0004 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 127:.\togglelib.c ****     uint8* sequance; 
 128:.\togglelib.c ****     uint8 index;
 129:.\togglelib.c ****     
 130:.\togglelib.c ****     /* Determine what state the badge is currently in */
 131:.\togglelib.c ****     switch(badge_state) {
 336              		.loc 1 131 0
 337 0006 6F4B     		ldr	r3, .L41
 338 0008 1B78     		ldrb	r3, [r3]
 339 000a DBB2     		uxtb	r3, r3
 340 000c 022B     		cmp	r3, #2
 341 000e 3AD0     		beq	.L24
 342 0010 02DC     		bgt	.L25
 343 0012 012B     		cmp	r3, #1
 344 0014 06D0     		beq	.L26
 345 0016 CDE0     		b	.L23
 346              	.L25:
 347 0018 032B     		cmp	r3, #3
 348 001a 65D0     		beq	.L27
 349 001c 042B     		cmp	r3, #4
 350 001e 00D1     		bne	.LCB303
 351 0020 95E0     		b	.L28	@long jump
 352              	.LCB303:
 353 0022 C7E0     		b	.L23
 354              	.L26:
 132:.\togglelib.c ****         case MORSE:
 133:.\togglelib.c ****             sequance = get_magic_toggle_sequance(BINARY);
 355              		.loc 1 133 0
 356 0024 0220     		mov	r0, #2
 357 0026 FFF7FEFF 		bl	get_magic_toggle_sequance
 358 002a 031C     		mov	r3, r0
 359 002c 3B60     		str	r3, [r7]
 134:.\togglelib.c ****             index = get_magic_toggle_index(BINARY);
 360              		.loc 1 134 0
 361 002e FC1D     		add	r4, r7, #7
 362 0030 0220     		mov	r0, #2
 363 0032 FFF7FEFF 		bl	get_magic_toggle_index
 364 0036 031C     		mov	r3, r0
 365 0038 2370     		strb	r3, [r4]
 135:.\togglelib.c ****             
 136:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
 137:.\togglelib.c ****             if (sequance[index] == RIGHT_TOGGLE) {
 366              		.loc 1 137 0
 367 003a FB1D     		add	r3, r7, #7
 368 003c 1B78     		ldrb	r3, [r3]
 369 003e 3A68     		ldr	r2, [r7]
 370 0040 D318     		add	r3, r2, r3
 371 0042 1B78     		ldrb	r3, [r3]
 372 0044 022B     		cmp	r3, #2
 373 0046 05D1     		bne	.L29
 138:.\togglelib.c ****                 index += 1;
 374              		.loc 1 138 0
 375 0048 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 10


 376 004a FA1D     		add	r2, r7, #7
 377 004c 1278     		ldrb	r2, [r2]
 378 004e 0132     		add	r2, r2, #1
 379 0050 1A70     		strb	r2, [r3]
 380 0052 02E0     		b	.L30
 381              	.L29:
 139:.\togglelib.c ****             }
 140:.\togglelib.c ****             else {
 141:.\togglelib.c ****                 index = 0;
 382              		.loc 1 141 0
 383 0054 FB1D     		add	r3, r7, #7
 384 0056 0022     		mov	r2, #0
 385 0058 1A70     		strb	r2, [r3]
 386              	.L30:
 142:.\togglelib.c ****             }
 143:.\togglelib.c ****                    
 144:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
 145:.\togglelib.c ****            if (index == strlen(sequance)){
 387              		.loc 1 145 0
 388 005a FB1D     		add	r3, r7, #7
 389 005c 1C78     		ldrb	r4, [r3]
 390 005e 3B68     		ldr	r3, [r7]
 391 0060 181C     		mov	r0, r3
 392 0062 FFF7FEFF 		bl	strlen
 393 0066 031C     		mov	r3, r0
 394 0068 9C42     		cmp	r4, r3
 395 006a 05D1     		bne	.L31
 146:.\togglelib.c ****             badge_state = BINARY;
 396              		.loc 1 146 0
 397 006c 554B     		ldr	r3, .L41
 398 006e 0222     		mov	r2, #2
 399 0070 1A70     		strb	r2, [r3]
 147:.\togglelib.c ****             index = 0;
 400              		.loc 1 147 0
 401 0072 FB1D     		add	r3, r7, #7
 402 0074 0022     		mov	r2, #0
 403 0076 1A70     		strb	r2, [r3]
 404              	.L31:
 148:.\togglelib.c ****            }
 149:.\togglelib.c ****         
 150:.\togglelib.c ****            /* Update the value in the toggle struct */
 151:.\togglelib.c ****             set_magic_toggle_index(BINARY, index);
 405              		.loc 1 151 0
 406 0078 FB1D     		add	r3, r7, #7
 407 007a 1B78     		ldrb	r3, [r3]
 408 007c 0220     		mov	r0, #2
 409 007e 191C     		mov	r1, r3
 410 0080 FFF7FEFF 		bl	set_magic_toggle_index
 152:.\togglelib.c ****         break;
 411              		.loc 1 152 0
 412 0084 96E0     		b	.L23
 413              	.L24:
 153:.\togglelib.c ****         case BINARY:
 154:.\togglelib.c ****             sequance = get_magic_toggle_sequance(SUBSTITUTION);
 414              		.loc 1 154 0
 415 0086 0320     		mov	r0, #3
 416 0088 FFF7FEFF 		bl	get_magic_toggle_sequance
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 11


 417 008c 031C     		mov	r3, r0
 418 008e 3B60     		str	r3, [r7]
 155:.\togglelib.c ****             index = get_magic_toggle_index(SUBSTITUTION);
 419              		.loc 1 155 0
 420 0090 FC1D     		add	r4, r7, #7
 421 0092 0320     		mov	r0, #3
 422 0094 FFF7FEFF 		bl	get_magic_toggle_index
 423 0098 031C     		mov	r3, r0
 424 009a 2370     		strb	r3, [r4]
 156:.\togglelib.c ****             
 157:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
 158:.\togglelib.c ****             if (sequance[index] == RIGHT_TOGGLE) {
 425              		.loc 1 158 0
 426 009c FB1D     		add	r3, r7, #7
 427 009e 1B78     		ldrb	r3, [r3]
 428 00a0 3A68     		ldr	r2, [r7]
 429 00a2 D318     		add	r3, r2, r3
 430 00a4 1B78     		ldrb	r3, [r3]
 431 00a6 022B     		cmp	r3, #2
 432 00a8 05D1     		bne	.L32
 159:.\togglelib.c ****                 index += 1;
 433              		.loc 1 159 0
 434 00aa FB1D     		add	r3, r7, #7
 435 00ac FA1D     		add	r2, r7, #7
 436 00ae 1278     		ldrb	r2, [r2]
 437 00b0 0132     		add	r2, r2, #1
 438 00b2 1A70     		strb	r2, [r3]
 439 00b4 02E0     		b	.L33
 440              	.L32:
 160:.\togglelib.c ****             }
 161:.\togglelib.c ****             else {
 162:.\togglelib.c ****                 index = 0;
 441              		.loc 1 162 0
 442 00b6 FB1D     		add	r3, r7, #7
 443 00b8 0022     		mov	r2, #0
 444 00ba 1A70     		strb	r2, [r3]
 445              	.L33:
 163:.\togglelib.c ****             }
 164:.\togglelib.c ****                    
 165:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
 166:.\togglelib.c ****            if (index == strlen(sequance)){
 446              		.loc 1 166 0
 447 00bc FB1D     		add	r3, r7, #7
 448 00be 1C78     		ldrb	r4, [r3]
 449 00c0 3B68     		ldr	r3, [r7]
 450 00c2 181C     		mov	r0, r3
 451 00c4 FFF7FEFF 		bl	strlen
 452 00c8 031C     		mov	r3, r0
 453 00ca 9C42     		cmp	r4, r3
 454 00cc 05D1     		bne	.L34
 167:.\togglelib.c ****             badge_state = SUBSTITUTION;
 455              		.loc 1 167 0
 456 00ce 3D4B     		ldr	r3, .L41
 457 00d0 0322     		mov	r2, #3
 458 00d2 1A70     		strb	r2, [r3]
 168:.\togglelib.c ****             index = 0;
 459              		.loc 1 168 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 12


 460 00d4 FB1D     		add	r3, r7, #7
 461 00d6 0022     		mov	r2, #0
 462 00d8 1A70     		strb	r2, [r3]
 463              	.L34:
 169:.\togglelib.c ****            }
 170:.\togglelib.c ****         
 171:.\togglelib.c ****            /* Update the value in the toggle struct */
 172:.\togglelib.c ****             set_magic_toggle_index(SUBSTITUTION, index);
 464              		.loc 1 172 0
 465 00da FB1D     		add	r3, r7, #7
 466 00dc 1B78     		ldrb	r3, [r3]
 467 00de 0320     		mov	r0, #3
 468 00e0 191C     		mov	r1, r3
 469 00e2 FFF7FEFF 		bl	set_magic_toggle_index
 173:.\togglelib.c ****         break;
 470              		.loc 1 173 0
 471 00e6 65E0     		b	.L23
 472              	.L27:
 174:.\togglelib.c ****         case SUBSTITUTION:
 175:.\togglelib.c ****             sequance = get_magic_toggle_sequance(ORGANIZER);
 473              		.loc 1 175 0
 474 00e8 0420     		mov	r0, #4
 475 00ea FFF7FEFF 		bl	get_magic_toggle_sequance
 476 00ee 031C     		mov	r3, r0
 477 00f0 3B60     		str	r3, [r7]
 176:.\togglelib.c ****             index = get_magic_toggle_index(ORGANIZER);
 478              		.loc 1 176 0
 479 00f2 FC1D     		add	r4, r7, #7
 480 00f4 0420     		mov	r0, #4
 481 00f6 FFF7FEFF 		bl	get_magic_toggle_index
 482 00fa 031C     		mov	r3, r0
 483 00fc 2370     		strb	r3, [r4]
 177:.\togglelib.c ****             
 178:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
 179:.\togglelib.c ****             if (sequance[index] == RIGHT_TOGGLE) {
 484              		.loc 1 179 0
 485 00fe FB1D     		add	r3, r7, #7
 486 0100 1B78     		ldrb	r3, [r3]
 487 0102 3A68     		ldr	r2, [r7]
 488 0104 D318     		add	r3, r2, r3
 489 0106 1B78     		ldrb	r3, [r3]
 490 0108 022B     		cmp	r3, #2
 491 010a 05D1     		bne	.L35
 180:.\togglelib.c ****                 index += 1;
 492              		.loc 1 180 0
 493 010c FB1D     		add	r3, r7, #7
 494 010e FA1D     		add	r2, r7, #7
 495 0110 1278     		ldrb	r2, [r2]
 496 0112 0132     		add	r2, r2, #1
 497 0114 1A70     		strb	r2, [r3]
 498 0116 02E0     		b	.L36
 499              	.L35:
 181:.\togglelib.c ****             }
 182:.\togglelib.c ****             else {
 183:.\togglelib.c ****                 index = 0;
 500              		.loc 1 183 0
 501 0118 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 13


 502 011a 0022     		mov	r2, #0
 503 011c 1A70     		strb	r2, [r3]
 504              	.L36:
 184:.\togglelib.c ****             }
 185:.\togglelib.c ****                    
 186:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
 187:.\togglelib.c ****            if (index == strlen(sequance)){
 505              		.loc 1 187 0
 506 011e FB1D     		add	r3, r7, #7
 507 0120 1C78     		ldrb	r4, [r3]
 508 0122 3B68     		ldr	r3, [r7]
 509 0124 181C     		mov	r0, r3
 510 0126 FFF7FEFF 		bl	strlen
 511 012a 031C     		mov	r3, r0
 512 012c 9C42     		cmp	r4, r3
 513 012e 07D1     		bne	.L37
 188:.\togglelib.c ****             badge_state = ORGANIZER;
 514              		.loc 1 188 0
 515 0130 244B     		ldr	r3, .L41
 516 0132 0422     		mov	r2, #4
 517 0134 1A70     		strb	r2, [r3]
 189:.\togglelib.c ****             index = 0;
 518              		.loc 1 189 0
 519 0136 FB1D     		add	r3, r7, #7
 520 0138 0022     		mov	r2, #0
 521 013a 1A70     		strb	r2, [r3]
 190:.\togglelib.c ****             PWM_Organizer_Start();
 522              		.loc 1 190 0
 523 013c FFF7FEFF 		bl	PWM_Organizer_Start
 524              	.L37:
 191:.\togglelib.c ****            }
 192:.\togglelib.c ****         
 193:.\togglelib.c ****            /* Update the value in the toggle struct */
 194:.\togglelib.c ****             set_magic_toggle_index(ORGANIZER, index);
 525              		.loc 1 194 0
 526 0140 FB1D     		add	r3, r7, #7
 527 0142 1B78     		ldrb	r3, [r3]
 528 0144 0420     		mov	r0, #4
 529 0146 191C     		mov	r1, r3
 530 0148 FFF7FEFF 		bl	set_magic_toggle_index
 195:.\togglelib.c ****         break;
 531              		.loc 1 195 0
 532 014c 32E0     		b	.L23
 533              	.L28:
 196:.\togglelib.c ****         case ORGANIZER:
 197:.\togglelib.c ****             sequance = get_magic_toggle_sequance(MORSE);
 534              		.loc 1 197 0
 535 014e 0120     		mov	r0, #1
 536 0150 FFF7FEFF 		bl	get_magic_toggle_sequance
 537 0154 031C     		mov	r3, r0
 538 0156 3B60     		str	r3, [r7]
 198:.\togglelib.c ****             index = get_magic_toggle_index(MORSE);
 539              		.loc 1 198 0
 540 0158 FC1D     		add	r4, r7, #7
 541 015a 0120     		mov	r0, #1
 542 015c FFF7FEFF 		bl	get_magic_toggle_index
 543 0160 031C     		mov	r3, r0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 14


 544 0162 2370     		strb	r3, [r4]
 199:.\togglelib.c ****             
 200:.\togglelib.c ****             /* Check if the toggle is the next value in the sequance */
 201:.\togglelib.c ****             if (sequance[index] == RIGHT_TOGGLE) {
 545              		.loc 1 201 0
 546 0164 FB1D     		add	r3, r7, #7
 547 0166 1B78     		ldrb	r3, [r3]
 548 0168 3A68     		ldr	r2, [r7]
 549 016a D318     		add	r3, r2, r3
 550 016c 1B78     		ldrb	r3, [r3]
 551 016e 022B     		cmp	r3, #2
 552 0170 05D1     		bne	.L38
 202:.\togglelib.c ****                 index += 1;
 553              		.loc 1 202 0
 554 0172 FB1D     		add	r3, r7, #7
 555 0174 FA1D     		add	r2, r7, #7
 556 0176 1278     		ldrb	r2, [r2]
 557 0178 0132     		add	r2, r2, #1
 558 017a 1A70     		strb	r2, [r3]
 559 017c 02E0     		b	.L39
 560              	.L38:
 203:.\togglelib.c ****             }
 204:.\togglelib.c ****             else {
 205:.\togglelib.c ****                 index = 0;
 561              		.loc 1 205 0
 562 017e FB1D     		add	r3, r7, #7
 563 0180 0022     		mov	r2, #0
 564 0182 1A70     		strb	r2, [r3]
 565              	.L39:
 206:.\togglelib.c ****             }
 207:.\togglelib.c ****                    
 208:.\togglelib.c ****            /* If the sequance is found change the state of the badge */
 209:.\togglelib.c ****            if (index == strlen(sequance)){
 566              		.loc 1 209 0
 567 0184 FB1D     		add	r3, r7, #7
 568 0186 1C78     		ldrb	r4, [r3]
 569 0188 3B68     		ldr	r3, [r7]
 570 018a 181C     		mov	r0, r3
 571 018c FFF7FEFF 		bl	strlen
 572 0190 031C     		mov	r3, r0
 573 0192 9C42     		cmp	r4, r3
 574 0194 07D1     		bne	.L40
 210:.\togglelib.c ****             badge_state = MORSE;
 575              		.loc 1 210 0
 576 0196 0B4B     		ldr	r3, .L41
 577 0198 0122     		mov	r2, #1
 578 019a 1A70     		strb	r2, [r3]
 211:.\togglelib.c ****             index = 0;
 579              		.loc 1 211 0
 580 019c FB1D     		add	r3, r7, #7
 581 019e 0022     		mov	r2, #0
 582 01a0 1A70     		strb	r2, [r3]
 212:.\togglelib.c ****             PWM_Organizer_Stop();
 583              		.loc 1 212 0
 584 01a2 FFF7FEFF 		bl	PWM_Organizer_Stop
 585              	.L40:
 213:.\togglelib.c ****            }
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 15


 214:.\togglelib.c ****         
 215:.\togglelib.c ****            /* Update the value in the toggle struct */
 216:.\togglelib.c ****             set_magic_toggle_index(MORSE, index);
 586              		.loc 1 216 0
 587 01a6 FB1D     		add	r3, r7, #7
 588 01a8 1B78     		ldrb	r3, [r3]
 589 01aa 0120     		mov	r0, #1
 590 01ac 191C     		mov	r1, r3
 591 01ae FFF7FEFF 		bl	set_magic_toggle_index
 217:.\togglelib.c ****         break;
 592              		.loc 1 217 0
 593 01b2 C046     		mov	r8, r8
 594              	.L23:
 218:.\togglelib.c ****         
 219:.\togglelib.c ****     }
 220:.\togglelib.c ****     
 221:.\togglelib.c ****     /* Delay for a long press and clear interrupt */
 222:.\togglelib.c ****     CyDelay(TOGGLE_DELAY);
 595              		.loc 1 222 0
 596 01b4 9620     		mov	r0, #150
 597 01b6 FFF7FEFF 		bl	CyDelay
 223:.\togglelib.c ****     SWR_ClearInterrupt();
 598              		.loc 1 223 0
 599 01ba FFF7FEFF 		bl	SWR_ClearInterrupt
 224:.\togglelib.c **** }
 600              		.loc 1 224 0
 601 01be BD46     		mov	sp, r7
 602 01c0 03B0     		add	sp, sp, #12
 603              		@ sp needed
 604 01c2 90BD     		pop	{r4, r7, pc}
 605              	.L42:
 606              		.align	2
 607              	.L41:
 608 01c4 00000000 		.word	badge_state
 609              		.cfi_endproc
 610              	.LFE34:
 611              		.size	SWR_Handler, .-SWR_Handler
 612              		.section	.text.SWB_Handler,"ax",%progbits
 613              		.align	2
 614              		.global	SWB_Handler
 615              		.code	16
 616              		.thumb_func
 617              		.type	SWB_Handler, %function
 618              	SWB_Handler:
 619              	.LFB35:
 225:.\togglelib.c **** 
 226:.\togglelib.c **** /* Signal handler for on board toggle press */
 227:.\togglelib.c **** CY_ISR( SWB_Handler ) {
 620              		.loc 1 227 0
 621              		.cfi_startproc
 622 0000 80B5     		push	{r7, lr}
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 228:.\togglelib.c ****     /* Flip IR Status */
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 16


 229:.\togglelib.c ****     if (get_status(IR_LED) == OFF) {
 628              		.loc 1 229 0
 629 0004 0420     		mov	r0, #4
 630 0006 FFF7FEFF 		bl	get_status
 631 000a 031C     		mov	r3, r0
 632 000c 002B     		cmp	r3, #0
 633 000e 03D1     		bne	.L44
 230:.\togglelib.c ****         turn_on(IR_LED);
 634              		.loc 1 230 0
 635 0010 0420     		mov	r0, #4
 636 0012 FFF7FEFF 		bl	turn_on
 637 0016 02E0     		b	.L45
 638              	.L44:
 231:.\togglelib.c ****     } 
 232:.\togglelib.c ****     else {
 233:.\togglelib.c ****          turn_off(IR_LED);
 639              		.loc 1 233 0
 640 0018 0420     		mov	r0, #4
 641 001a FFF7FEFF 		bl	turn_off
 642              	.L45:
 234:.\togglelib.c ****     }
 235:.\togglelib.c ****     
 236:.\togglelib.c ****     if (get_status(BOARD_LED) == OFF) {
 643              		.loc 1 236 0
 644 001e 0520     		mov	r0, #5
 645 0020 FFF7FEFF 		bl	get_status
 646 0024 031C     		mov	r3, r0
 647 0026 002B     		cmp	r3, #0
 648 0028 03D1     		bne	.L46
 237:.\togglelib.c ****         turn_on(BOARD_LED);
 649              		.loc 1 237 0
 650 002a 0520     		mov	r0, #5
 651 002c FFF7FEFF 		bl	turn_on
 652 0030 02E0     		b	.L47
 653              	.L46:
 238:.\togglelib.c ****     } 
 239:.\togglelib.c ****     else {
 240:.\togglelib.c ****          turn_off(BOARD_LED);
 654              		.loc 1 240 0
 655 0032 0520     		mov	r0, #5
 656 0034 FFF7FEFF 		bl	turn_off
 657              	.L47:
 241:.\togglelib.c ****     }
 242:.\togglelib.c ****     
 243:.\togglelib.c **** 
 244:.\togglelib.c ****     /* Clear interrupt */
 245:.\togglelib.c ****     SWB_ClearInterrupt();
 658              		.loc 1 245 0
 659 0038 FFF7FEFF 		bl	SWB_ClearInterrupt
 246:.\togglelib.c **** }
 660              		.loc 1 246 0
 661 003c BD46     		mov	sp, r7
 662              		@ sp needed
 663 003e 80BD     		pop	{r7, pc}
 664              		.cfi_endproc
 665              	.LFE35:
 666              		.size	SWB_Handler, .-SWB_Handler
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 17


 667              		.global	__aeabi_idivmod
 668              		.section	.text.ORG_Handler,"ax",%progbits
 669              		.align	2
 670              		.global	ORG_Handler
 671              		.code	16
 672              		.thumb_func
 673              		.type	ORG_Handler, %function
 674              	ORG_Handler:
 675              	.LFB36:
 247:.\togglelib.c **** 
 248:.\togglelib.c **** /* Signal handler for organizer lights */
 249:.\togglelib.c **** CY_ISR( ORG_Handler ) {
 676              		.loc 1 249 0
 677              		.cfi_startproc
 678 0000 90B5     		push	{r4, r7, lr}
 679              		.cfi_def_cfa_offset 12
 680              		.cfi_offset 4, -12
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 85B0     		sub	sp, sp, #20
 684              		.cfi_def_cfa_offset 32
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_def_cfa_register 7
 250:.\togglelib.c ****     /* */
 251:.\togglelib.c ****     uint8 current_color_left = get_color(LEFT_LED);
 687              		.loc 1 251 0
 688 0006 FC1D     		add	r4, r7, #7
 689 0008 0120     		mov	r0, #1
 690 000a FFF7FEFF 		bl	get_color
 691 000e 031C     		mov	r3, r0
 692 0010 2370     		strb	r3, [r4]
 252:.\togglelib.c ****     uint8 current_color_right = get_color(RIGHT_LED);
 693              		.loc 1 252 0
 694 0012 BC1D     		add	r4, r7, #6
 695 0014 0220     		mov	r0, #2
 696 0016 FFF7FEFF 		bl	get_color
 697 001a 031C     		mov	r3, r0
 698 001c 2370     		strb	r3, [r4]
 253:.\togglelib.c ****     uint32 rand_num_left = (rand() % 7) + 1;
 699              		.loc 1 253 0
 700 001e FFF7FEFF 		bl	rand
 701 0022 031C     		mov	r3, r0
 702 0024 181C     		mov	r0, r3
 703 0026 0721     		mov	r1, #7
 704 0028 FFF7FEFF 		bl	__aeabi_idivmod
 705 002c 0B1C     		mov	r3, r1
 706 002e 0133     		add	r3, r3, #1
 707 0030 FB60     		str	r3, [r7, #12]
 254:.\togglelib.c ****     uint32 rand_num_right = (rand() % 7) + 1;
 708              		.loc 1 254 0
 709 0032 FFF7FEFF 		bl	rand
 710 0036 031C     		mov	r3, r0
 711 0038 181C     		mov	r0, r3
 712 003a 0721     		mov	r1, #7
 713 003c FFF7FEFF 		bl	__aeabi_idivmod
 714 0040 0B1C     		mov	r3, r1
 715 0042 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 18


 716 0044 BB60     		str	r3, [r7, #8]
 255:.\togglelib.c ****     
 256:.\togglelib.c ****     while (current_color_left == rand_num_left){
 717              		.loc 1 256 0
 718 0046 09E0     		b	.L49
 719              	.L50:
 257:.\togglelib.c ****         rand_num_left = (rand() % 7) + 1;
 720              		.loc 1 257 0
 721 0048 FFF7FEFF 		bl	rand
 722 004c 031C     		mov	r3, r0
 723 004e 181C     		mov	r0, r3
 724 0050 0721     		mov	r1, #7
 725 0052 FFF7FEFF 		bl	__aeabi_idivmod
 726 0056 0B1C     		mov	r3, r1
 727 0058 0133     		add	r3, r3, #1
 728 005a FB60     		str	r3, [r7, #12]
 729              	.L49:
 256:.\togglelib.c ****     while (current_color_left == rand_num_left){
 730              		.loc 1 256 0 discriminator 1
 731 005c FB1D     		add	r3, r7, #7
 732 005e 1A78     		ldrb	r2, [r3]
 733 0060 FB68     		ldr	r3, [r7, #12]
 734 0062 9A42     		cmp	r2, r3
 735 0064 F0D0     		beq	.L50
 258:.\togglelib.c ****     }
 259:.\togglelib.c ****     
 260:.\togglelib.c ****    while (current_color_right == rand_num_right){
 736              		.loc 1 260 0
 737 0066 09E0     		b	.L51
 738              	.L52:
 261:.\togglelib.c ****         rand_num_right = (rand() % 7) + 1;
 739              		.loc 1 261 0
 740 0068 FFF7FEFF 		bl	rand
 741 006c 031C     		mov	r3, r0
 742 006e 181C     		mov	r0, r3
 743 0070 0721     		mov	r1, #7
 744 0072 FFF7FEFF 		bl	__aeabi_idivmod
 745 0076 0B1C     		mov	r3, r1
 746 0078 0133     		add	r3, r3, #1
 747 007a BB60     		str	r3, [r7, #8]
 748              	.L51:
 260:.\togglelib.c ****    while (current_color_right == rand_num_right){
 749              		.loc 1 260 0 discriminator 1
 750 007c BB1D     		add	r3, r7, #6
 751 007e 1A78     		ldrb	r2, [r3]
 752 0080 BB68     		ldr	r3, [r7, #8]
 753 0082 9A42     		cmp	r2, r3
 754 0084 F0D0     		beq	.L52
 262:.\togglelib.c ****     }
 263:.\togglelib.c ****     
 264:.\togglelib.c ****     set_color(LEFT_LED, rand_num_left);
 755              		.loc 1 264 0
 756 0086 FB68     		ldr	r3, [r7, #12]
 757 0088 DBB2     		uxtb	r3, r3
 758 008a 0120     		mov	r0, #1
 759 008c 191C     		mov	r1, r3
 760 008e FFF7FEFF 		bl	set_color
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 19


 265:.\togglelib.c ****     set_color(RIGHT_LED, rand_num_right);
 761              		.loc 1 265 0
 762 0092 BB68     		ldr	r3, [r7, #8]
 763 0094 DBB2     		uxtb	r3, r3
 764 0096 0220     		mov	r0, #2
 765 0098 191C     		mov	r1, r3
 766 009a FFF7FEFF 		bl	set_color
 266:.\togglelib.c ****     turn_off(LEFT_RIGHT_LED);
 767              		.loc 1 266 0
 768 009e 0320     		mov	r0, #3
 769 00a0 FFF7FEFF 		bl	turn_off
 267:.\togglelib.c ****     turn_on(LEFT_RIGHT_LED);
 770              		.loc 1 267 0
 771 00a4 0320     		mov	r0, #3
 772 00a6 FFF7FEFF 		bl	turn_on
 268:.\togglelib.c ****     
 269:.\togglelib.c ****     ORG_Int_ClearPending();
 773              		.loc 1 269 0
 774 00aa FFF7FEFF 		bl	ORG_Int_ClearPending
 270:.\togglelib.c ****     PWM_Organizer_ReadStatusRegister();
 775              		.loc 1 270 0
 776 00ae FFF7FEFF 		bl	PWM_Organizer_ReadStatusRegister
 271:.\togglelib.c **** }
 777              		.loc 1 271 0
 778 00b2 BD46     		mov	sp, r7
 779 00b4 05B0     		add	sp, sp, #20
 780              		@ sp needed
 781 00b6 90BD     		pop	{r4, r7, pc}
 782              		.cfi_endproc
 783              	.LFE36:
 784              		.size	ORG_Handler, .-ORG_Handler
 785              		.section	.text.set_magic_toggle_sequance,"ax",%progbits
 786              		.align	2
 787              		.global	set_magic_toggle_sequance
 788              		.code	16
 789              		.thumb_func
 790              		.type	set_magic_toggle_sequance, %function
 791              	set_magic_toggle_sequance:
 792              	.LFB37:
 272:.\togglelib.c **** 
 273:.\togglelib.c **** /* Sets the magic toogle sequence of the global toggle state change structure */
 274:.\togglelib.c **** void set_magic_toggle_sequance(uint8 state_flag, uint8* sequance) {
 793              		.loc 1 274 0
 794              		.cfi_startproc
 795 0000 80B5     		push	{r7, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 82B0     		sub	sp, sp, #8
 800              		.cfi_def_cfa_offset 16
 801 0004 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 0006 021C     		mov	r2, r0
 804 0008 3960     		str	r1, [r7]
 805 000a FB1D     		add	r3, r7, #7
 806 000c 1A70     		strb	r2, [r3]
 275:.\togglelib.c ****     switch(state_flag) {
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 20


 807              		.loc 1 275 0
 808 000e FB1D     		add	r3, r7, #7
 809 0010 1B78     		ldrb	r3, [r3]
 810 0012 022B     		cmp	r3, #2
 811 0014 10D0     		beq	.L55
 812 0016 02DC     		bgt	.L56
 813 0018 012B     		cmp	r3, #1
 814 001a 05D0     		beq	.L57
 815 001c 24E0     		b	.L53
 816              	.L56:
 817 001e 032B     		cmp	r3, #3
 818 0020 12D0     		beq	.L58
 819 0022 042B     		cmp	r3, #4
 820 0024 18D0     		beq	.L59
 821 0026 1FE0     		b	.L53
 822              	.L57:
 276:.\togglelib.c ****         case MORSE:
 277:.\togglelib.c ****             memmove(Morse_Sequence.sequance, sequance, MAX_SEQUENCE_SIZE);
 823              		.loc 1 277 0
 824 0028 114A     		ldr	r2, .L60
 825 002a 3B68     		ldr	r3, [r7]
 826 002c 101C     		mov	r0, r2
 827 002e 191C     		mov	r1, r3
 828 0030 1422     		mov	r2, #20
 829 0032 FFF7FEFF 		bl	memmove
 278:.\togglelib.c ****         break;
 830              		.loc 1 278 0
 831 0036 17E0     		b	.L53
 832              	.L55:
 279:.\togglelib.c ****         case BINARY:
 280:.\togglelib.c ****             memmove(Binary_Sequence.sequance, sequance, MAX_SEQUENCE_SIZE);
 833              		.loc 1 280 0
 834 0038 0E4A     		ldr	r2, .L60+4
 835 003a 3B68     		ldr	r3, [r7]
 836 003c 101C     		mov	r0, r2
 837 003e 191C     		mov	r1, r3
 838 0040 1422     		mov	r2, #20
 839 0042 FFF7FEFF 		bl	memmove
 281:.\togglelib.c ****         break;
 840              		.loc 1 281 0
 841 0046 0FE0     		b	.L53
 842              	.L58:
 282:.\togglelib.c ****         case SUBSTITUTION:
 283:.\togglelib.c ****             memmove(Substitution_Sequence.sequance, sequance, MAX_SEQUENCE_SIZE);
 843              		.loc 1 283 0
 844 0048 0B4A     		ldr	r2, .L60+8
 845 004a 3B68     		ldr	r3, [r7]
 846 004c 101C     		mov	r0, r2
 847 004e 191C     		mov	r1, r3
 848 0050 1422     		mov	r2, #20
 849 0052 FFF7FEFF 		bl	memmove
 284:.\togglelib.c ****         break;
 850              		.loc 1 284 0
 851 0056 07E0     		b	.L53
 852              	.L59:
 285:.\togglelib.c ****         case ORGANIZER:
 286:.\togglelib.c ****             memmove(Organizer_Sequence.sequance, sequance, MAX_SEQUENCE_SIZE);
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 21


 853              		.loc 1 286 0
 854 0058 084A     		ldr	r2, .L60+12
 855 005a 3B68     		ldr	r3, [r7]
 856 005c 101C     		mov	r0, r2
 857 005e 191C     		mov	r1, r3
 858 0060 1422     		mov	r2, #20
 859 0062 FFF7FEFF 		bl	memmove
 287:.\togglelib.c ****         break;
 860              		.loc 1 287 0
 861 0066 C046     		mov	r8, r8
 862              	.L53:
 288:.\togglelib.c ****     }   
 289:.\togglelib.c ****     
 290:.\togglelib.c **** }
 863              		.loc 1 290 0
 864 0068 BD46     		mov	sp, r7
 865 006a 02B0     		add	sp, sp, #8
 866              		@ sp needed
 867 006c 80BD     		pop	{r7, pc}
 868              	.L61:
 869 006e C046     		.align	2
 870              	.L60:
 871 0070 00000000 		.word	Morse_Sequence
 872 0074 00000000 		.word	Binary_Sequence
 873 0078 00000000 		.word	Substitution_Sequence
 874 007c 00000000 		.word	Organizer_Sequence
 875              		.cfi_endproc
 876              	.LFE37:
 877              		.size	set_magic_toggle_sequance, .-set_magic_toggle_sequance
 878              		.section	.text.get_magic_toggle_sequance,"ax",%progbits
 879              		.align	2
 880              		.global	get_magic_toggle_sequance
 881              		.code	16
 882              		.thumb_func
 883              		.type	get_magic_toggle_sequance, %function
 884              	get_magic_toggle_sequance:
 885              	.LFB38:
 291:.\togglelib.c **** 
 292:.\togglelib.c **** /* Gets the magic toogle sequence of the global toggle state change structure */
 293:.\togglelib.c **** uint8* get_magic_toggle_sequance(uint8 state_flag) {
 886              		.loc 1 293 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 021C     		mov	r2, r0
 897 0008 FB1D     		add	r3, r7, #7
 898 000a 1A70     		strb	r2, [r3]
 294:.\togglelib.c ****     switch(state_flag) {
 899              		.loc 1 294 0
 900 000c FB1D     		add	r3, r7, #7
 901 000e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 22


 902 0010 022B     		cmp	r3, #2
 903 0012 0AD0     		beq	.L64
 904 0014 02DC     		bgt	.L65
 905 0016 012B     		cmp	r3, #1
 906 0018 05D0     		beq	.L66
 907 001a 0CE0     		b	.L63
 908              	.L65:
 909 001c 032B     		cmp	r3, #3
 910 001e 06D0     		beq	.L67
 911 0020 042B     		cmp	r3, #4
 912 0022 06D0     		beq	.L68
 913 0024 07E0     		b	.L63
 914              	.L66:
 295:.\togglelib.c ****         case MORSE:
 296:.\togglelib.c ****             return Morse_Sequence.sequance;
 915              		.loc 1 296 0
 916 0026 064B     		ldr	r3, .L70
 917 0028 06E0     		b	.L69
 918              	.L64:
 297:.\togglelib.c ****         break;
 298:.\togglelib.c ****         case BINARY:
 299:.\togglelib.c ****              return Binary_Sequence.sequance;
 919              		.loc 1 299 0
 920 002a 064B     		ldr	r3, .L70+4
 921 002c 04E0     		b	.L69
 922              	.L67:
 300:.\togglelib.c ****         break;
 301:.\togglelib.c ****         case SUBSTITUTION:
 302:.\togglelib.c ****              return Substitution_Sequence.sequance;
 923              		.loc 1 302 0
 924 002e 064B     		ldr	r3, .L70+8
 925 0030 02E0     		b	.L69
 926              	.L68:
 303:.\togglelib.c ****         break;
 304:.\togglelib.c ****         case ORGANIZER:
 305:.\togglelib.c ****              return Organizer_Sequence.sequance;
 927              		.loc 1 305 0
 928 0032 064B     		ldr	r3, .L70+12
 929 0034 00E0     		b	.L69
 930              	.L63:
 306:.\togglelib.c ****         break;
 307:.\togglelib.c ****     }
 308:.\togglelib.c ****     return NULL;
 931              		.loc 1 308 0
 932 0036 0023     		mov	r3, #0
 933              	.L69:
 309:.\togglelib.c **** }
 934              		.loc 1 309 0
 935 0038 181C     		mov	r0, r3
 936 003a BD46     		mov	sp, r7
 937 003c 02B0     		add	sp, sp, #8
 938              		@ sp needed
 939 003e 80BD     		pop	{r7, pc}
 940              	.L71:
 941              		.align	2
 942              	.L70:
 943 0040 00000000 		.word	Morse_Sequence
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 23


 944 0044 00000000 		.word	Binary_Sequence
 945 0048 00000000 		.word	Substitution_Sequence
 946 004c 00000000 		.word	Organizer_Sequence
 947              		.cfi_endproc
 948              	.LFE38:
 949              		.size	get_magic_toggle_sequance, .-get_magic_toggle_sequance
 950              		.section	.text.set_magic_toggle_index,"ax",%progbits
 951              		.align	2
 952              		.global	set_magic_toggle_index
 953              		.code	16
 954              		.thumb_func
 955              		.type	set_magic_toggle_index, %function
 956              	set_magic_toggle_index:
 957              	.LFB39:
 310:.\togglelib.c **** 
 311:.\togglelib.c **** /* Sets the index of the magic toogle sequence of the global toggle state change structure */
 312:.\togglelib.c **** void set_magic_toggle_index(uint8 state_flag, uint8 value) {
 958              		.loc 1 312 0
 959              		.cfi_startproc
 960 0000 80B5     		push	{r7, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 82B0     		sub	sp, sp, #8
 965              		.cfi_def_cfa_offset 16
 966 0004 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0006 0A1C     		mov	r2, r1
 969 0008 FB1D     		add	r3, r7, #7
 970 000a 011C     		add	r1, r0, #0
 971 000c 1970     		strb	r1, [r3]
 972 000e BB1D     		add	r3, r7, #6
 973 0010 1A70     		strb	r2, [r3]
 313:.\togglelib.c ****     switch(state_flag) {
 974              		.loc 1 313 0
 975 0012 FB1D     		add	r3, r7, #7
 976 0014 1B78     		ldrb	r3, [r3]
 977 0016 022B     		cmp	r3, #2
 978 0018 0DD0     		beq	.L74
 979 001a 02DC     		bgt	.L75
 980 001c 012B     		cmp	r3, #1
 981 001e 05D0     		beq	.L76
 982 0020 18E0     		b	.L72
 983              	.L75:
 984 0022 032B     		cmp	r3, #3
 985 0024 0CD0     		beq	.L77
 986 0026 042B     		cmp	r3, #4
 987 0028 0FD0     		beq	.L78
 988 002a 13E0     		b	.L72
 989              	.L76:
 314:.\togglelib.c ****         case MORSE:
 315:.\togglelib.c ****             Morse_Sequence.index = value;
 990              		.loc 1 315 0
 991 002c 0B4B     		ldr	r3, .L79
 992 002e BA1D     		add	r2, r7, #6
 993 0030 1278     		ldrb	r2, [r2]
 994 0032 1A75     		strb	r2, [r3, #20]
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 24


 316:.\togglelib.c ****         break;
 995              		.loc 1 316 0
 996 0034 0EE0     		b	.L72
 997              	.L74:
 317:.\togglelib.c ****         case BINARY:
 318:.\togglelib.c ****             Binary_Sequence.index = value;
 998              		.loc 1 318 0
 999 0036 0A4B     		ldr	r3, .L79+4
 1000 0038 BA1D     		add	r2, r7, #6
 1001 003a 1278     		ldrb	r2, [r2]
 1002 003c 1A75     		strb	r2, [r3, #20]
 319:.\togglelib.c ****         break;
 1003              		.loc 1 319 0
 1004 003e 09E0     		b	.L72
 1005              	.L77:
 320:.\togglelib.c ****         case SUBSTITUTION:
 321:.\togglelib.c ****             Substitution_Sequence.index = value;
 1006              		.loc 1 321 0
 1007 0040 084B     		ldr	r3, .L79+8
 1008 0042 BA1D     		add	r2, r7, #6
 1009 0044 1278     		ldrb	r2, [r2]
 1010 0046 1A75     		strb	r2, [r3, #20]
 322:.\togglelib.c ****         break;
 1011              		.loc 1 322 0
 1012 0048 04E0     		b	.L72
 1013              	.L78:
 323:.\togglelib.c ****         case ORGANIZER:
 324:.\togglelib.c ****             Organizer_Sequence.index = value;
 1014              		.loc 1 324 0
 1015 004a 074B     		ldr	r3, .L79+12
 1016 004c BA1D     		add	r2, r7, #6
 1017 004e 1278     		ldrb	r2, [r2]
 1018 0050 1A75     		strb	r2, [r3, #20]
 325:.\togglelib.c ****         break;
 1019              		.loc 1 325 0
 1020 0052 C046     		mov	r8, r8
 1021              	.L72:
 326:.\togglelib.c ****     }
 327:.\togglelib.c **** }
 1022              		.loc 1 327 0
 1023 0054 BD46     		mov	sp, r7
 1024 0056 02B0     		add	sp, sp, #8
 1025              		@ sp needed
 1026 0058 80BD     		pop	{r7, pc}
 1027              	.L80:
 1028 005a C046     		.align	2
 1029              	.L79:
 1030 005c 00000000 		.word	Morse_Sequence
 1031 0060 00000000 		.word	Binary_Sequence
 1032 0064 00000000 		.word	Substitution_Sequence
 1033 0068 00000000 		.word	Organizer_Sequence
 1034              		.cfi_endproc
 1035              	.LFE39:
 1036              		.size	set_magic_toggle_index, .-set_magic_toggle_index
 1037              		.section	.text.get_magic_toggle_index,"ax",%progbits
 1038              		.align	2
 1039              		.global	get_magic_toggle_index
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 25


 1040              		.code	16
 1041              		.thumb_func
 1042              		.type	get_magic_toggle_index, %function
 1043              	get_magic_toggle_index:
 1044              	.LFB40:
 328:.\togglelib.c **** 
 329:.\togglelib.c **** /* Gets the index of the magic toogle sequence of the global toggle state change structure */
 330:.\togglelib.c **** uint8 get_magic_toggle_index(uint8 state_flag) {
 1045              		.loc 1 330 0
 1046              		.cfi_startproc
 1047 0000 80B5     		push	{r7, lr}
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 82B0     		sub	sp, sp, #8
 1052              		.cfi_def_cfa_offset 16
 1053 0004 00AF     		add	r7, sp, #0
 1054              		.cfi_def_cfa_register 7
 1055 0006 021C     		mov	r2, r0
 1056 0008 FB1D     		add	r3, r7, #7
 1057 000a 1A70     		strb	r2, [r3]
 331:.\togglelib.c ****         switch(state_flag) {
 1058              		.loc 1 331 0
 1059 000c FB1D     		add	r3, r7, #7
 1060 000e 1B78     		ldrb	r3, [r3]
 1061 0010 022B     		cmp	r3, #2
 1062 0012 0CD0     		beq	.L83
 1063 0014 02DC     		bgt	.L84
 1064 0016 012B     		cmp	r3, #1
 1065 0018 05D0     		beq	.L85
 1066 001a 14E0     		b	.L82
 1067              	.L84:
 1068 001c 032B     		cmp	r3, #3
 1069 001e 0AD0     		beq	.L86
 1070 0020 042B     		cmp	r3, #4
 1071 0022 0CD0     		beq	.L87
 1072 0024 0FE0     		b	.L82
 1073              	.L85:
 332:.\togglelib.c ****         case MORSE:
 333:.\togglelib.c ****             return Morse_Sequence.index;
 1074              		.loc 1 333 0
 1075 0026 0A4B     		ldr	r3, .L89
 1076 0028 1B7D     		ldrb	r3, [r3, #20]
 1077 002a DBB2     		uxtb	r3, r3
 1078 002c 0CE0     		b	.L88
 1079              	.L83:
 334:.\togglelib.c ****         break;
 335:.\togglelib.c ****         case BINARY:
 336:.\togglelib.c ****             return Binary_Sequence.index;
 1080              		.loc 1 336 0
 1081 002e 094B     		ldr	r3, .L89+4
 1082 0030 1B7D     		ldrb	r3, [r3, #20]
 1083 0032 DBB2     		uxtb	r3, r3
 1084 0034 08E0     		b	.L88
 1085              	.L86:
 337:.\togglelib.c ****         break;
 338:.\togglelib.c ****         case SUBSTITUTION:
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 26


 339:.\togglelib.c ****             return Substitution_Sequence.index;
 1086              		.loc 1 339 0
 1087 0036 084B     		ldr	r3, .L89+8
 1088 0038 1B7D     		ldrb	r3, [r3, #20]
 1089 003a DBB2     		uxtb	r3, r3
 1090 003c 04E0     		b	.L88
 1091              	.L87:
 340:.\togglelib.c ****         break;
 341:.\togglelib.c ****         case ORGANIZER:
 342:.\togglelib.c ****             return Organizer_Sequence.index;
 1092              		.loc 1 342 0
 1093 003e 074B     		ldr	r3, .L89+12
 1094 0040 1B7D     		ldrb	r3, [r3, #20]
 1095 0042 DBB2     		uxtb	r3, r3
 1096 0044 00E0     		b	.L88
 1097              	.L82:
 343:.\togglelib.c ****         break;
 344:.\togglelib.c ****     }
 345:.\togglelib.c ****     return -1;
 1098              		.loc 1 345 0
 1099 0046 FF23     		mov	r3, #255
 1100              	.L88:
 346:.\togglelib.c **** }
 1101              		.loc 1 346 0
 1102 0048 181C     		mov	r0, r3
 1103 004a BD46     		mov	sp, r7
 1104 004c 02B0     		add	sp, sp, #8
 1105              		@ sp needed
 1106 004e 80BD     		pop	{r7, pc}
 1107              	.L90:
 1108              		.align	2
 1109              	.L89:
 1110 0050 00000000 		.word	Morse_Sequence
 1111 0054 00000000 		.word	Binary_Sequence
 1112 0058 00000000 		.word	Substitution_Sequence
 1113 005c 00000000 		.word	Organizer_Sequence
 1114              		.cfi_endproc
 1115              	.LFE40:
 1116              		.size	get_magic_toggle_index, .-get_magic_toggle_index
 1117              		.section	.text.init_magic_toggle_sequance,"ax",%progbits
 1118              		.align	2
 1119              		.global	init_magic_toggle_sequance
 1120              		.code	16
 1121              		.thumb_func
 1122              		.type	init_magic_toggle_sequance, %function
 1123              	init_magic_toggle_sequance:
 1124              	.LFB41:
 347:.\togglelib.c **** 
 348:.\togglelib.c **** /* Initialize the magic toogle structures */
 349:.\togglelib.c **** void init_magic_toggle_sequance(uint8 state_flag, uint8* sequance) {
 1125              		.loc 1 349 0
 1126              		.cfi_startproc
 1127 0000 80B5     		push	{r7, lr}
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 1131 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 27


 1132              		.cfi_def_cfa_offset 16
 1133 0004 00AF     		add	r7, sp, #0
 1134              		.cfi_def_cfa_register 7
 1135 0006 021C     		mov	r2, r0
 1136 0008 3960     		str	r1, [r7]
 1137 000a FB1D     		add	r3, r7, #7
 1138 000c 1A70     		strb	r2, [r3]
 350:.\togglelib.c ****     set_magic_toggle_sequance(state_flag, sequance);
 1139              		.loc 1 350 0
 1140 000e FB1D     		add	r3, r7, #7
 1141 0010 1A78     		ldrb	r2, [r3]
 1142 0012 3B68     		ldr	r3, [r7]
 1143 0014 101C     		mov	r0, r2
 1144 0016 191C     		mov	r1, r3
 1145 0018 FFF7FEFF 		bl	set_magic_toggle_sequance
 351:.\togglelib.c ****     set_magic_toggle_index(state_flag, 0);
 1146              		.loc 1 351 0
 1147 001c FB1D     		add	r3, r7, #7
 1148 001e 1B78     		ldrb	r3, [r3]
 1149 0020 181C     		mov	r0, r3
 1150 0022 0021     		mov	r1, #0
 1151 0024 FFF7FEFF 		bl	set_magic_toggle_index
 352:.\togglelib.c **** }
 1152              		.loc 1 352 0
 1153 0028 BD46     		mov	sp, r7
 1154 002a 02B0     		add	sp, sp, #8
 1155              		@ sp needed
 1156 002c 80BD     		pop	{r7, pc}
 1157              		.cfi_endproc
 1158              	.LFE41:
 1159              		.size	init_magic_toggle_sequance, .-init_magic_toggle_sequance
 1160 002e C046     		.section	.text.enable_toggle_interrupts,"ax",%progbits
 1161              		.align	2
 1162              		.global	enable_toggle_interrupts
 1163              		.code	16
 1164              		.thumb_func
 1165              		.type	enable_toggle_interrupts, %function
 1166              	enable_toggle_interrupts:
 1167              	.LFB42:
 353:.\togglelib.c **** 
 354:.\togglelib.c **** void enable_toggle_interrupts() {
 1168              		.loc 1 354 0
 1169              		.cfi_startproc
 1170 0000 80B5     		push	{r7, lr}
 1171              		.cfi_def_cfa_offset 8
 1172              		.cfi_offset 7, -8
 1173              		.cfi_offset 14, -4
 1174 0002 00AF     		add	r7, sp, #0
 1175              		.cfi_def_cfa_register 7
 355:.\togglelib.c ****     /* Setup toggle interrupts  */
 356:.\togglelib.c ****     SWB_Int_StartEx( SWB_Handler );
 1176              		.loc 1 356 0
 1177 0004 0C4B     		ldr	r3, .L93
 1178 0006 181C     		mov	r0, r3
 1179 0008 FFF7FEFF 		bl	SWB_Int_StartEx
 357:.\togglelib.c ****     SWL_Int_StartEx( SWL_Handler );
 1180              		.loc 1 357 0
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 28


 1181 000c 0B4B     		ldr	r3, .L93+4
 1182 000e 181C     		mov	r0, r3
 1183 0010 FFF7FEFF 		bl	SWL_Int_StartEx
 358:.\togglelib.c ****     SWR_Int_StartEx( SWR_Handler );
 1184              		.loc 1 358 0
 1185 0014 0A4B     		ldr	r3, .L93+8
 1186 0016 181C     		mov	r0, r3
 1187 0018 FFF7FEFF 		bl	SWR_Int_StartEx
 359:.\togglelib.c ****     ORG_Int_StartEx( ORG_Handler );
 1188              		.loc 1 359 0
 1189 001c 094B     		ldr	r3, .L93+12
 1190 001e 181C     		mov	r0, r3
 1191 0020 FFF7FEFF 		bl	ORG_Int_StartEx
 360:.\togglelib.c ****     /* Seed random */
 361:.\togglelib.c ****     srand(time(NULL));
 1192              		.loc 1 361 0
 1193 0024 0020     		mov	r0, #0
 1194 0026 FFF7FEFF 		bl	time
 1195 002a 031C     		mov	r3, r0
 1196 002c 181C     		mov	r0, r3
 1197 002e FFF7FEFF 		bl	srand
 362:.\togglelib.c **** }...
 1198              		.loc 1 362 0
 1199 0032 BD46     		mov	sp, r7
 1200              		@ sp needed
 1201 0034 80BD     		pop	{r7, pc}
 1202              	.L94:
 1203 0036 C046     		.align	2
 1204              	.L93:
 1205 0038 00000000 		.word	SWB_Handler
 1206 003c 00000000 		.word	SWL_Handler
 1207 0040 00000000 		.word	SWR_Handler
 1208 0044 00000000 		.word	ORG_Handler
 1209              		.cfi_endproc
 1210              	.LFE42:
 1211              		.size	enable_toggle_interrupts, .-enable_toggle_interrupts
 1212              		.text
 1213              	.Letext0:
 1214              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1215              		.file 3 ".\\togglelib.h"
 1216              		.file 4 ".\\state.h"
 1217              		.section	.debug_info,"",%progbits
 1218              	.Ldebug_info0:
 1219 0000 F6020000 		.4byte	0x2f6
 1220 0004 0400     		.2byte	0x4
 1221 0006 00000000 		.4byte	.Ldebug_abbrev0
 1222 000a 04       		.byte	0x4
 1223 000b 01       		.uleb128 0x1
 1224 000c B7000000 		.4byte	.LASF36
 1225 0010 01       		.byte	0x1
 1226 0011 8E010000 		.4byte	.LASF37
 1227 0015 9B020000 		.4byte	.LASF38
 1228 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1229 001d 00000000 		.4byte	0
 1230 0021 00000000 		.4byte	.Ldebug_line0
 1231 0025 02       		.uleb128 0x2
 1232 0026 01       		.byte	0x1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 29


 1233 0027 06       		.byte	0x6
 1234 0028 E2020000 		.4byte	.LASF0
 1235 002c 02       		.uleb128 0x2
 1236 002d 01       		.byte	0x1
 1237 002e 08       		.byte	0x8
 1238 002f 33010000 		.4byte	.LASF1
 1239 0033 02       		.uleb128 0x2
 1240 0034 02       		.byte	0x2
 1241 0035 05       		.byte	0x5
 1242 0036 70020000 		.4byte	.LASF2
 1243 003a 02       		.uleb128 0x2
 1244 003b 02       		.byte	0x2
 1245 003c 07       		.byte	0x7
 1246 003d 4E000000 		.4byte	.LASF3
 1247 0041 02       		.uleb128 0x2
 1248 0042 04       		.byte	0x4
 1249 0043 05       		.byte	0x5
 1250 0044 92020000 		.4byte	.LASF4
 1251 0048 02       		.uleb128 0x2
 1252 0049 04       		.byte	0x4
 1253 004a 07       		.byte	0x7
 1254 004b 41010000 		.4byte	.LASF5
 1255 004f 02       		.uleb128 0x2
 1256 0050 08       		.byte	0x8
 1257 0051 05       		.byte	0x5
 1258 0052 57020000 		.4byte	.LASF6
 1259 0056 02       		.uleb128 0x2
 1260 0057 08       		.byte	0x8
 1261 0058 07       		.byte	0x7
 1262 0059 E1010000 		.4byte	.LASF7
 1263 005d 03       		.uleb128 0x3
 1264 005e 04       		.byte	0x4
 1265 005f 05       		.byte	0x5
 1266 0060 696E7400 		.ascii	"int\000"
 1267 0064 02       		.uleb128 0x2
 1268 0065 04       		.byte	0x4
 1269 0066 07       		.byte	0x7
 1270 0067 BA010000 		.4byte	.LASF8
 1271 006b 04       		.uleb128 0x4
 1272 006c 53010000 		.4byte	.LASF9
 1273 0070 02       		.byte	0x2
 1274 0071 A1       		.byte	0xa1
 1275 0072 2C000000 		.4byte	0x2c
 1276 0076 04       		.uleb128 0x4
 1277 0077 B3010000 		.4byte	.LASF10
 1278 007b 02       		.byte	0x2
 1279 007c A3       		.byte	0xa3
 1280 007d 48000000 		.4byte	0x48
 1281 0081 02       		.uleb128 0x2
 1282 0082 04       		.byte	0x4
 1283 0083 04       		.byte	0x4
 1284 0084 B1000000 		.4byte	.LASF11
 1285 0088 02       		.uleb128 0x2
 1286 0089 08       		.byte	0x8
 1287 008a 04       		.byte	0x4
 1288 008b 87010000 		.4byte	.LASF12
 1289 008f 02       		.uleb128 0x2
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 30


 1290 0090 01       		.byte	0x1
 1291 0091 08       		.byte	0x8
 1292 0092 65020000 		.4byte	.LASF13
 1293 0096 05       		.uleb128 0x5
 1294 0097 6B000000 		.4byte	0x6b
 1295 009b 02       		.uleb128 0x2
 1296 009c 04       		.byte	0x4
 1297 009d 07       		.byte	0x7
 1298 009e 45020000 		.4byte	.LASF14
 1299 00a2 06       		.uleb128 0x6
 1300 00a3 F8010000 		.4byte	.LASF39
 1301 00a7 15       		.byte	0x15
 1302 00a8 03       		.byte	0x3
 1303 00a9 1D       		.byte	0x1d
 1304 00aa C7000000 		.4byte	0xc7
 1305 00ae 07       		.uleb128 0x7
 1306 00af 4E020000 		.4byte	.LASF15
 1307 00b3 03       		.byte	0x3
 1308 00b4 1E       		.byte	0x1e
 1309 00b5 C7000000 		.4byte	0xc7
 1310 00b9 00       		.byte	0
 1311 00ba 07       		.uleb128 0x7
 1312 00bb 6A020000 		.4byte	.LASF16
 1313 00bf 03       		.byte	0x3
 1314 00c0 1F       		.byte	0x1f
 1315 00c1 6B000000 		.4byte	0x6b
 1316 00c5 14       		.byte	0x14
 1317 00c6 00       		.byte	0
 1318 00c7 08       		.uleb128 0x8
 1319 00c8 6B000000 		.4byte	0x6b
 1320 00cc D7000000 		.4byte	0xd7
 1321 00d0 09       		.uleb128 0x9
 1322 00d1 9B000000 		.4byte	0x9b
 1323 00d5 13       		.byte	0x13
 1324 00d6 00       		.byte	0
 1325 00d7 0A       		.uleb128 0xa
 1326 00d8 7A020000 		.4byte	.LASF17
 1327 00dc 01       		.byte	0x1
 1328 00dd 1B       		.byte	0x1b
 1329 00de 00000000 		.4byte	.LFB33
 1330 00e2 C8010000 		.4byte	.LFE33-.LFB33
 1331 00e6 01       		.uleb128 0x1
 1332 00e7 9C       		.byte	0x9c
 1333 00e8 09010000 		.4byte	0x109
 1334 00ec 0B       		.uleb128 0xb
 1335 00ed 4E020000 		.4byte	.LASF15
 1336 00f1 01       		.byte	0x1
 1337 00f2 1C       		.byte	0x1c
 1338 00f3 09010000 		.4byte	0x109
 1339 00f7 02       		.uleb128 0x2
 1340 00f8 91       		.byte	0x91
 1341 00f9 68       		.sleb128 -24
 1342 00fa 0B       		.uleb128 0xb
 1343 00fb 6A020000 		.4byte	.LASF16
 1344 00ff 01       		.byte	0x1
 1345 0100 1D       		.byte	0x1d
 1346 0101 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 31


 1347 0105 02       		.uleb128 0x2
 1348 0106 91       		.byte	0x91
 1349 0107 6F       		.sleb128 -17
 1350 0108 00       		.byte	0
 1351 0109 0C       		.uleb128 0xc
 1352 010a 04       		.byte	0x4
 1353 010b 6B000000 		.4byte	0x6b
 1354 010f 0A       		.uleb128 0xa
 1355 0110 42000000 		.4byte	.LASF18
 1356 0114 01       		.byte	0x1
 1357 0115 7E       		.byte	0x7e
 1358 0116 00000000 		.4byte	.LFB34
 1359 011a C8010000 		.4byte	.LFE34-.LFB34
 1360 011e 01       		.uleb128 0x1
 1361 011f 9C       		.byte	0x9c
 1362 0120 41010000 		.4byte	0x141
 1363 0124 0B       		.uleb128 0xb
 1364 0125 4E020000 		.4byte	.LASF15
 1365 0129 01       		.byte	0x1
 1366 012a 7F       		.byte	0x7f
 1367 012b 09010000 		.4byte	0x109
 1368 012f 02       		.uleb128 0x2
 1369 0130 91       		.byte	0x91
 1370 0131 68       		.sleb128 -24
 1371 0132 0B       		.uleb128 0xb
 1372 0133 6A020000 		.4byte	.LASF16
 1373 0137 01       		.byte	0x1
 1374 0138 80       		.byte	0x80
 1375 0139 6B000000 		.4byte	0x6b
 1376 013d 02       		.uleb128 0x2
 1377 013e 91       		.byte	0x91
 1378 013f 6F       		.sleb128 -17
 1379 0140 00       		.byte	0
 1380 0141 0D       		.uleb128 0xd
 1381 0142 EE020000 		.4byte	.LASF40
 1382 0146 01       		.byte	0x1
 1383 0147 E3       		.byte	0xe3
 1384 0148 00000000 		.4byte	.LFB35
 1385 014c 40000000 		.4byte	.LFE35-.LFB35
 1386 0150 01       		.uleb128 0x1
 1387 0151 9C       		.byte	0x9c
 1388 0152 0A       		.uleb128 0xa
 1389 0153 86020000 		.4byte	.LASF19
 1390 0157 01       		.byte	0x1
 1391 0158 F9       		.byte	0xf9
 1392 0159 00000000 		.4byte	.LFB36
 1393 015d B8000000 		.4byte	.LFE36-.LFB36
 1394 0161 01       		.uleb128 0x1
 1395 0162 9C       		.byte	0x9c
 1396 0163 A0010000 		.4byte	0x1a0
 1397 0167 0B       		.uleb128 0xb
 1398 0168 74000000 		.4byte	.LASF20
 1399 016c 01       		.byte	0x1
 1400 016d FB       		.byte	0xfb
 1401 016e 6B000000 		.4byte	0x6b
 1402 0172 02       		.uleb128 0x2
 1403 0173 91       		.byte	0x91
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 32


 1404 0174 67       		.sleb128 -25
 1405 0175 0B       		.uleb128 0xb
 1406 0176 59010000 		.4byte	.LASF21
 1407 017a 01       		.byte	0x1
 1408 017b FC       		.byte	0xfc
 1409 017c 6B000000 		.4byte	0x6b
 1410 0180 02       		.uleb128 0x2
 1411 0181 91       		.byte	0x91
 1412 0182 66       		.sleb128 -26
 1413 0183 0B       		.uleb128 0xb
 1414 0184 37020000 		.4byte	.LASF22
 1415 0188 01       		.byte	0x1
 1416 0189 FD       		.byte	0xfd
 1417 018a 76000000 		.4byte	0x76
 1418 018e 02       		.uleb128 0x2
 1419 018f 91       		.byte	0x91
 1420 0190 6C       		.sleb128 -20
 1421 0191 0B       		.uleb128 0xb
 1422 0192 A2000000 		.4byte	.LASF23
 1423 0196 01       		.byte	0x1
 1424 0197 FE       		.byte	0xfe
 1425 0198 76000000 		.4byte	0x76
 1426 019c 02       		.uleb128 0x2
 1427 019d 91       		.byte	0x91
 1428 019e 68       		.sleb128 -24
 1429 019f 00       		.byte	0
 1430 01a0 0E       		.uleb128 0xe
 1431 01a1 C7010000 		.4byte	.LASF24
 1432 01a5 01       		.byte	0x1
 1433 01a6 1201     		.2byte	0x112
 1434 01a8 00000000 		.4byte	.LFB37
 1435 01ac 80000000 		.4byte	.LFE37-.LFB37
 1436 01b0 01       		.uleb128 0x1
 1437 01b1 9C       		.byte	0x9c
 1438 01b2 D5010000 		.4byte	0x1d5
 1439 01b6 0F       		.uleb128 0xf
 1440 01b7 6D010000 		.4byte	.LASF25
 1441 01bb 01       		.byte	0x1
 1442 01bc 1201     		.2byte	0x112
 1443 01be 6B000000 		.4byte	0x6b
 1444 01c2 02       		.uleb128 0x2
 1445 01c3 91       		.byte	0x91
 1446 01c4 77       		.sleb128 -9
 1447 01c5 0F       		.uleb128 0xf
 1448 01c6 4E020000 		.4byte	.LASF15
 1449 01ca 01       		.byte	0x1
 1450 01cb 1201     		.2byte	0x112
 1451 01cd 09010000 		.4byte	0x109
 1452 01d1 02       		.uleb128 0x2
 1453 01d2 91       		.byte	0x91
 1454 01d3 70       		.sleb128 -16
 1455 01d4 00       		.byte	0
 1456 01d5 10       		.uleb128 0x10
 1457 01d6 0C000000 		.4byte	.LASF28
 1458 01da 01       		.byte	0x1
 1459 01db 2501     		.2byte	0x125
 1460 01dd 09010000 		.4byte	0x109
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 33


 1461 01e1 00000000 		.4byte	.LFB38
 1462 01e5 50000000 		.4byte	.LFE38-.LFB38
 1463 01e9 01       		.uleb128 0x1
 1464 01ea 9C       		.byte	0x9c
 1465 01eb FF010000 		.4byte	0x1ff
 1466 01ef 0F       		.uleb128 0xf
 1467 01f0 6D010000 		.4byte	.LASF25
 1468 01f4 01       		.byte	0x1
 1469 01f5 2501     		.2byte	0x125
 1470 01f7 6B000000 		.4byte	0x6b
 1471 01fb 02       		.uleb128 0x2
 1472 01fc 91       		.byte	0x91
 1473 01fd 77       		.sleb128 -9
 1474 01fe 00       		.byte	0
 1475 01ff 11       		.uleb128 0x11
 1476 0200 9C010000 		.4byte	.LASF26
 1477 0204 01       		.byte	0x1
 1478 0205 3801     		.2byte	0x138
 1479 0207 00000000 		.4byte	.LFB39
 1480 020b 6C000000 		.4byte	.LFE39-.LFB39
 1481 020f 01       		.uleb128 0x1
 1482 0210 9C       		.byte	0x9c
 1483 0211 34020000 		.4byte	0x234
 1484 0215 0F       		.uleb128 0xf
 1485 0216 6D010000 		.4byte	.LASF25
 1486 021a 01       		.byte	0x1
 1487 021b 3801     		.2byte	0x138
 1488 021d 6B000000 		.4byte	0x6b
 1489 0221 02       		.uleb128 0x2
 1490 0222 91       		.byte	0x91
 1491 0223 77       		.sleb128 -9
 1492 0224 0F       		.uleb128 0xf
 1493 0225 26000000 		.4byte	.LASF27
 1494 0229 01       		.byte	0x1
 1495 022a 3801     		.2byte	0x138
 1496 022c 6B000000 		.4byte	0x6b
 1497 0230 02       		.uleb128 0x2
 1498 0231 91       		.byte	0x91
 1499 0232 76       		.sleb128 -10
 1500 0233 00       		.byte	0
 1501 0234 10       		.uleb128 0x10
 1502 0235 FA020000 		.4byte	.LASF29
 1503 0239 01       		.byte	0x1
 1504 023a 4A01     		.2byte	0x14a
 1505 023c 6B000000 		.4byte	0x6b
 1506 0240 00000000 		.4byte	.LFB40
 1507 0244 60000000 		.4byte	.LFE40-.LFB40
 1508 0248 01       		.uleb128 0x1
 1509 0249 9C       		.byte	0x9c
 1510 024a 5E020000 		.4byte	0x25e
 1511 024e 0F       		.uleb128 0xf
 1512 024f 6D010000 		.4byte	.LASF25
 1513 0253 01       		.byte	0x1
 1514 0254 4A01     		.2byte	0x14a
 1515 0256 6B000000 		.4byte	0x6b
 1516 025a 02       		.uleb128 0x2
 1517 025b 91       		.byte	0x91
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 34


 1518 025c 77       		.sleb128 -9
 1519 025d 00       		.byte	0
 1520 025e 0E       		.uleb128 0xe
 1521 025f 87000000 		.4byte	.LASF30
 1522 0263 01       		.byte	0x1
 1523 0264 5D01     		.2byte	0x15d
 1524 0266 00000000 		.4byte	.LFB41
 1525 026a 2E000000 		.4byte	.LFE41-.LFB41
 1526 026e 01       		.uleb128 0x1
 1527 026f 9C       		.byte	0x9c
 1528 0270 93020000 		.4byte	0x293
 1529 0274 0F       		.uleb128 0xf
 1530 0275 6D010000 		.4byte	.LASF25
 1531 0279 01       		.byte	0x1
 1532 027a 5D01     		.2byte	0x15d
 1533 027c 6B000000 		.4byte	0x6b
 1534 0280 02       		.uleb128 0x2
 1535 0281 91       		.byte	0x91
 1536 0282 77       		.sleb128 -9
 1537 0283 0F       		.uleb128 0xf
 1538 0284 4E020000 		.4byte	.LASF15
 1539 0288 01       		.byte	0x1
 1540 0289 5D01     		.2byte	0x15d
 1541 028b 09010000 		.4byte	0x109
 1542 028f 02       		.uleb128 0x2
 1543 0290 91       		.byte	0x91
 1544 0291 70       		.sleb128 -16
 1545 0292 00       		.byte	0
 1546 0293 12       		.uleb128 0x12
 1547 0294 0E020000 		.4byte	.LASF41
 1548 0298 01       		.byte	0x1
 1549 0299 6201     		.2byte	0x162
 1550 029b 00000000 		.4byte	.LFB42
 1551 029f 48000000 		.4byte	.LFE42-.LFB42
 1552 02a3 01       		.uleb128 0x1
 1553 02a4 9C       		.byte	0x9c
 1554 02a5 13       		.uleb128 0x13
 1555 02a6 00000000 		.4byte	.LASF31
 1556 02aa 04       		.byte	0x4
 1557 02ab 17       		.byte	0x17
 1558 02ac 96000000 		.4byte	0x96
 1559 02b0 14       		.uleb128 0x14
 1560 02b1 78010000 		.4byte	.LASF32
 1561 02b5 01       		.byte	0x1
 1562 02b6 15       		.byte	0x15
 1563 02b7 C1020000 		.4byte	0x2c1
 1564 02bb 05       		.uleb128 0x5
 1565 02bc 03       		.byte	0x3
 1566 02bd 00000000 		.4byte	Morse_Sequence
 1567 02c1 05       		.uleb128 0x5
 1568 02c2 A2000000 		.4byte	0xa2
 1569 02c6 14       		.uleb128 0x14
 1570 02c7 27020000 		.4byte	.LASF33
 1571 02cb 01       		.byte	0x1
 1572 02cc 16       		.byte	0x16
 1573 02cd C1020000 		.4byte	0x2c1
 1574 02d1 05       		.uleb128 0x5
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 35


 1575 02d2 03       		.byte	0x3
 1576 02d3 00000000 		.4byte	Binary_Sequence
 1577 02d7 14       		.uleb128 0x14
 1578 02d8 2C000000 		.4byte	.LASF34
 1579 02dc 01       		.byte	0x1
 1580 02dd 17       		.byte	0x17
 1581 02de C1020000 		.4byte	0x2c1
 1582 02e2 05       		.uleb128 0x5
 1583 02e3 03       		.byte	0x3
 1584 02e4 00000000 		.4byte	Substitution_Sequence
 1585 02e8 14       		.uleb128 0x14
 1586 02e9 61000000 		.4byte	.LASF35
 1587 02ed 01       		.byte	0x1
 1588 02ee 18       		.byte	0x18
 1589 02ef C1020000 		.4byte	0x2c1
 1590 02f3 05       		.uleb128 0x5
 1591 02f4 03       		.byte	0x3
 1592 02f5 00000000 		.4byte	Organizer_Sequence
 1593 02f9 00       		.byte	0
 1594              		.section	.debug_abbrev,"",%progbits
 1595              	.Ldebug_abbrev0:
 1596 0000 01       		.uleb128 0x1
 1597 0001 11       		.uleb128 0x11
 1598 0002 01       		.byte	0x1
 1599 0003 25       		.uleb128 0x25
 1600 0004 0E       		.uleb128 0xe
 1601 0005 13       		.uleb128 0x13
 1602 0006 0B       		.uleb128 0xb
 1603 0007 03       		.uleb128 0x3
 1604 0008 0E       		.uleb128 0xe
 1605 0009 1B       		.uleb128 0x1b
 1606 000a 0E       		.uleb128 0xe
 1607 000b 55       		.uleb128 0x55
 1608 000c 17       		.uleb128 0x17
 1609 000d 11       		.uleb128 0x11
 1610 000e 01       		.uleb128 0x1
 1611 000f 10       		.uleb128 0x10
 1612 0010 17       		.uleb128 0x17
 1613 0011 00       		.byte	0
 1614 0012 00       		.byte	0
 1615 0013 02       		.uleb128 0x2
 1616 0014 24       		.uleb128 0x24
 1617 0015 00       		.byte	0
 1618 0016 0B       		.uleb128 0xb
 1619 0017 0B       		.uleb128 0xb
 1620 0018 3E       		.uleb128 0x3e
 1621 0019 0B       		.uleb128 0xb
 1622 001a 03       		.uleb128 0x3
 1623 001b 0E       		.uleb128 0xe
 1624 001c 00       		.byte	0
 1625 001d 00       		.byte	0
 1626 001e 03       		.uleb128 0x3
 1627 001f 24       		.uleb128 0x24
 1628 0020 00       		.byte	0
 1629 0021 0B       		.uleb128 0xb
 1630 0022 0B       		.uleb128 0xb
 1631 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 36


 1632 0024 0B       		.uleb128 0xb
 1633 0025 03       		.uleb128 0x3
 1634 0026 08       		.uleb128 0x8
 1635 0027 00       		.byte	0
 1636 0028 00       		.byte	0
 1637 0029 04       		.uleb128 0x4
 1638 002a 16       		.uleb128 0x16
 1639 002b 00       		.byte	0
 1640 002c 03       		.uleb128 0x3
 1641 002d 0E       		.uleb128 0xe
 1642 002e 3A       		.uleb128 0x3a
 1643 002f 0B       		.uleb128 0xb
 1644 0030 3B       		.uleb128 0x3b
 1645 0031 0B       		.uleb128 0xb
 1646 0032 49       		.uleb128 0x49
 1647 0033 13       		.uleb128 0x13
 1648 0034 00       		.byte	0
 1649 0035 00       		.byte	0
 1650 0036 05       		.uleb128 0x5
 1651 0037 35       		.uleb128 0x35
 1652 0038 00       		.byte	0
 1653 0039 49       		.uleb128 0x49
 1654 003a 13       		.uleb128 0x13
 1655 003b 00       		.byte	0
 1656 003c 00       		.byte	0
 1657 003d 06       		.uleb128 0x6
 1658 003e 13       		.uleb128 0x13
 1659 003f 01       		.byte	0x1
 1660 0040 03       		.uleb128 0x3
 1661 0041 0E       		.uleb128 0xe
 1662 0042 0B       		.uleb128 0xb
 1663 0043 0B       		.uleb128 0xb
 1664 0044 3A       		.uleb128 0x3a
 1665 0045 0B       		.uleb128 0xb
 1666 0046 3B       		.uleb128 0x3b
 1667 0047 0B       		.uleb128 0xb
 1668 0048 01       		.uleb128 0x1
 1669 0049 13       		.uleb128 0x13
 1670 004a 00       		.byte	0
 1671 004b 00       		.byte	0
 1672 004c 07       		.uleb128 0x7
 1673 004d 0D       		.uleb128 0xd
 1674 004e 00       		.byte	0
 1675 004f 03       		.uleb128 0x3
 1676 0050 0E       		.uleb128 0xe
 1677 0051 3A       		.uleb128 0x3a
 1678 0052 0B       		.uleb128 0xb
 1679 0053 3B       		.uleb128 0x3b
 1680 0054 0B       		.uleb128 0xb
 1681 0055 49       		.uleb128 0x49
 1682 0056 13       		.uleb128 0x13
 1683 0057 38       		.uleb128 0x38
 1684 0058 0B       		.uleb128 0xb
 1685 0059 00       		.byte	0
 1686 005a 00       		.byte	0
 1687 005b 08       		.uleb128 0x8
 1688 005c 01       		.uleb128 0x1
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 37


 1689 005d 01       		.byte	0x1
 1690 005e 49       		.uleb128 0x49
 1691 005f 13       		.uleb128 0x13
 1692 0060 01       		.uleb128 0x1
 1693 0061 13       		.uleb128 0x13
 1694 0062 00       		.byte	0
 1695 0063 00       		.byte	0
 1696 0064 09       		.uleb128 0x9
 1697 0065 21       		.uleb128 0x21
 1698 0066 00       		.byte	0
 1699 0067 49       		.uleb128 0x49
 1700 0068 13       		.uleb128 0x13
 1701 0069 2F       		.uleb128 0x2f
 1702 006a 0B       		.uleb128 0xb
 1703 006b 00       		.byte	0
 1704 006c 00       		.byte	0
 1705 006d 0A       		.uleb128 0xa
 1706 006e 2E       		.uleb128 0x2e
 1707 006f 01       		.byte	0x1
 1708 0070 3F       		.uleb128 0x3f
 1709 0071 19       		.uleb128 0x19
 1710 0072 03       		.uleb128 0x3
 1711 0073 0E       		.uleb128 0xe
 1712 0074 3A       		.uleb128 0x3a
 1713 0075 0B       		.uleb128 0xb
 1714 0076 3B       		.uleb128 0x3b
 1715 0077 0B       		.uleb128 0xb
 1716 0078 27       		.uleb128 0x27
 1717 0079 19       		.uleb128 0x19
 1718 007a 11       		.uleb128 0x11
 1719 007b 01       		.uleb128 0x1
 1720 007c 12       		.uleb128 0x12
 1721 007d 06       		.uleb128 0x6
 1722 007e 40       		.uleb128 0x40
 1723 007f 18       		.uleb128 0x18
 1724 0080 9642     		.uleb128 0x2116
 1725 0082 19       		.uleb128 0x19
 1726 0083 01       		.uleb128 0x1
 1727 0084 13       		.uleb128 0x13
 1728 0085 00       		.byte	0
 1729 0086 00       		.byte	0
 1730 0087 0B       		.uleb128 0xb
 1731 0088 34       		.uleb128 0x34
 1732 0089 00       		.byte	0
 1733 008a 03       		.uleb128 0x3
 1734 008b 0E       		.uleb128 0xe
 1735 008c 3A       		.uleb128 0x3a
 1736 008d 0B       		.uleb128 0xb
 1737 008e 3B       		.uleb128 0x3b
 1738 008f 0B       		.uleb128 0xb
 1739 0090 49       		.uleb128 0x49
 1740 0091 13       		.uleb128 0x13
 1741 0092 02       		.uleb128 0x2
 1742 0093 18       		.uleb128 0x18
 1743 0094 00       		.byte	0
 1744 0095 00       		.byte	0
 1745 0096 0C       		.uleb128 0xc
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 38


 1746 0097 0F       		.uleb128 0xf
 1747 0098 00       		.byte	0
 1748 0099 0B       		.uleb128 0xb
 1749 009a 0B       		.uleb128 0xb
 1750 009b 49       		.uleb128 0x49
 1751 009c 13       		.uleb128 0x13
 1752 009d 00       		.byte	0
 1753 009e 00       		.byte	0
 1754 009f 0D       		.uleb128 0xd
 1755 00a0 2E       		.uleb128 0x2e
 1756 00a1 00       		.byte	0
 1757 00a2 3F       		.uleb128 0x3f
 1758 00a3 19       		.uleb128 0x19
 1759 00a4 03       		.uleb128 0x3
 1760 00a5 0E       		.uleb128 0xe
 1761 00a6 3A       		.uleb128 0x3a
 1762 00a7 0B       		.uleb128 0xb
 1763 00a8 3B       		.uleb128 0x3b
 1764 00a9 0B       		.uleb128 0xb
 1765 00aa 27       		.uleb128 0x27
 1766 00ab 19       		.uleb128 0x19
 1767 00ac 11       		.uleb128 0x11
 1768 00ad 01       		.uleb128 0x1
 1769 00ae 12       		.uleb128 0x12
 1770 00af 06       		.uleb128 0x6
 1771 00b0 40       		.uleb128 0x40
 1772 00b1 18       		.uleb128 0x18
 1773 00b2 9642     		.uleb128 0x2116
 1774 00b4 19       		.uleb128 0x19
 1775 00b5 00       		.byte	0
 1776 00b6 00       		.byte	0
 1777 00b7 0E       		.uleb128 0xe
 1778 00b8 2E       		.uleb128 0x2e
 1779 00b9 01       		.byte	0x1
 1780 00ba 3F       		.uleb128 0x3f
 1781 00bb 19       		.uleb128 0x19
 1782 00bc 03       		.uleb128 0x3
 1783 00bd 0E       		.uleb128 0xe
 1784 00be 3A       		.uleb128 0x3a
 1785 00bf 0B       		.uleb128 0xb
 1786 00c0 3B       		.uleb128 0x3b
 1787 00c1 05       		.uleb128 0x5
 1788 00c2 27       		.uleb128 0x27
 1789 00c3 19       		.uleb128 0x19
 1790 00c4 11       		.uleb128 0x11
 1791 00c5 01       		.uleb128 0x1
 1792 00c6 12       		.uleb128 0x12
 1793 00c7 06       		.uleb128 0x6
 1794 00c8 40       		.uleb128 0x40
 1795 00c9 18       		.uleb128 0x18
 1796 00ca 9642     		.uleb128 0x2116
 1797 00cc 19       		.uleb128 0x19
 1798 00cd 01       		.uleb128 0x1
 1799 00ce 13       		.uleb128 0x13
 1800 00cf 00       		.byte	0
 1801 00d0 00       		.byte	0
 1802 00d1 0F       		.uleb128 0xf
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 39


 1803 00d2 05       		.uleb128 0x5
 1804 00d3 00       		.byte	0
 1805 00d4 03       		.uleb128 0x3
 1806 00d5 0E       		.uleb128 0xe
 1807 00d6 3A       		.uleb128 0x3a
 1808 00d7 0B       		.uleb128 0xb
 1809 00d8 3B       		.uleb128 0x3b
 1810 00d9 05       		.uleb128 0x5
 1811 00da 49       		.uleb128 0x49
 1812 00db 13       		.uleb128 0x13
 1813 00dc 02       		.uleb128 0x2
 1814 00dd 18       		.uleb128 0x18
 1815 00de 00       		.byte	0
 1816 00df 00       		.byte	0
 1817 00e0 10       		.uleb128 0x10
 1818 00e1 2E       		.uleb128 0x2e
 1819 00e2 01       		.byte	0x1
 1820 00e3 3F       		.uleb128 0x3f
 1821 00e4 19       		.uleb128 0x19
 1822 00e5 03       		.uleb128 0x3
 1823 00e6 0E       		.uleb128 0xe
 1824 00e7 3A       		.uleb128 0x3a
 1825 00e8 0B       		.uleb128 0xb
 1826 00e9 3B       		.uleb128 0x3b
 1827 00ea 05       		.uleb128 0x5
 1828 00eb 27       		.uleb128 0x27
 1829 00ec 19       		.uleb128 0x19
 1830 00ed 49       		.uleb128 0x49
 1831 00ee 13       		.uleb128 0x13
 1832 00ef 11       		.uleb128 0x11
 1833 00f0 01       		.uleb128 0x1
 1834 00f1 12       		.uleb128 0x12
 1835 00f2 06       		.uleb128 0x6
 1836 00f3 40       		.uleb128 0x40
 1837 00f4 18       		.uleb128 0x18
 1838 00f5 9742     		.uleb128 0x2117
 1839 00f7 19       		.uleb128 0x19
 1840 00f8 01       		.uleb128 0x1
 1841 00f9 13       		.uleb128 0x13
 1842 00fa 00       		.byte	0
 1843 00fb 00       		.byte	0
 1844 00fc 11       		.uleb128 0x11
 1845 00fd 2E       		.uleb128 0x2e
 1846 00fe 01       		.byte	0x1
 1847 00ff 3F       		.uleb128 0x3f
 1848 0100 19       		.uleb128 0x19
 1849 0101 03       		.uleb128 0x3
 1850 0102 0E       		.uleb128 0xe
 1851 0103 3A       		.uleb128 0x3a
 1852 0104 0B       		.uleb128 0xb
 1853 0105 3B       		.uleb128 0x3b
 1854 0106 05       		.uleb128 0x5
 1855 0107 27       		.uleb128 0x27
 1856 0108 19       		.uleb128 0x19
 1857 0109 11       		.uleb128 0x11
 1858 010a 01       		.uleb128 0x1
 1859 010b 12       		.uleb128 0x12
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 40


 1860 010c 06       		.uleb128 0x6
 1861 010d 40       		.uleb128 0x40
 1862 010e 18       		.uleb128 0x18
 1863 010f 9742     		.uleb128 0x2117
 1864 0111 19       		.uleb128 0x19
 1865 0112 01       		.uleb128 0x1
 1866 0113 13       		.uleb128 0x13
 1867 0114 00       		.byte	0
 1868 0115 00       		.byte	0
 1869 0116 12       		.uleb128 0x12
 1870 0117 2E       		.uleb128 0x2e
 1871 0118 00       		.byte	0
 1872 0119 3F       		.uleb128 0x3f
 1873 011a 19       		.uleb128 0x19
 1874 011b 03       		.uleb128 0x3
 1875 011c 0E       		.uleb128 0xe
 1876 011d 3A       		.uleb128 0x3a
 1877 011e 0B       		.uleb128 0xb
 1878 011f 3B       		.uleb128 0x3b
 1879 0120 05       		.uleb128 0x5
 1880 0121 11       		.uleb128 0x11
 1881 0122 01       		.uleb128 0x1
 1882 0123 12       		.uleb128 0x12
 1883 0124 06       		.uleb128 0x6
 1884 0125 40       		.uleb128 0x40
 1885 0126 18       		.uleb128 0x18
 1886 0127 9642     		.uleb128 0x2116
 1887 0129 19       		.uleb128 0x19
 1888 012a 00       		.byte	0
 1889 012b 00       		.byte	0
 1890 012c 13       		.uleb128 0x13
 1891 012d 34       		.uleb128 0x34
 1892 012e 00       		.byte	0
 1893 012f 03       		.uleb128 0x3
 1894 0130 0E       		.uleb128 0xe
 1895 0131 3A       		.uleb128 0x3a
 1896 0132 0B       		.uleb128 0xb
 1897 0133 3B       		.uleb128 0x3b
 1898 0134 0B       		.uleb128 0xb
 1899 0135 49       		.uleb128 0x49
 1900 0136 13       		.uleb128 0x13
 1901 0137 3F       		.uleb128 0x3f
 1902 0138 19       		.uleb128 0x19
 1903 0139 3C       		.uleb128 0x3c
 1904 013a 19       		.uleb128 0x19
 1905 013b 00       		.byte	0
 1906 013c 00       		.byte	0
 1907 013d 14       		.uleb128 0x14
 1908 013e 34       		.uleb128 0x34
 1909 013f 00       		.byte	0
 1910 0140 03       		.uleb128 0x3
 1911 0141 0E       		.uleb128 0xe
 1912 0142 3A       		.uleb128 0x3a
 1913 0143 0B       		.uleb128 0xb
 1914 0144 3B       		.uleb128 0x3b
 1915 0145 0B       		.uleb128 0xb
 1916 0146 49       		.uleb128 0x49
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 41


 1917 0147 13       		.uleb128 0x13
 1918 0148 3F       		.uleb128 0x3f
 1919 0149 19       		.uleb128 0x19
 1920 014a 02       		.uleb128 0x2
 1921 014b 18       		.uleb128 0x18
 1922 014c 00       		.byte	0
 1923 014d 00       		.byte	0
 1924 014e 00       		.byte	0
 1925              		.section	.debug_aranges,"",%progbits
 1926 0000 64000000 		.4byte	0x64
 1927 0004 0200     		.2byte	0x2
 1928 0006 00000000 		.4byte	.Ldebug_info0
 1929 000a 04       		.byte	0x4
 1930 000b 00       		.byte	0
 1931 000c 0000     		.2byte	0
 1932 000e 0000     		.2byte	0
 1933 0010 00000000 		.4byte	.LFB33
 1934 0014 C8010000 		.4byte	.LFE33-.LFB33
 1935 0018 00000000 		.4byte	.LFB34
 1936 001c C8010000 		.4byte	.LFE34-.LFB34
 1937 0020 00000000 		.4byte	.LFB35
 1938 0024 40000000 		.4byte	.LFE35-.LFB35
 1939 0028 00000000 		.4byte	.LFB36
 1940 002c B8000000 		.4byte	.LFE36-.LFB36
 1941 0030 00000000 		.4byte	.LFB37
 1942 0034 80000000 		.4byte	.LFE37-.LFB37
 1943 0038 00000000 		.4byte	.LFB38
 1944 003c 50000000 		.4byte	.LFE38-.LFB38
 1945 0040 00000000 		.4byte	.LFB39
 1946 0044 6C000000 		.4byte	.LFE39-.LFB39
 1947 0048 00000000 		.4byte	.LFB40
 1948 004c 60000000 		.4byte	.LFE40-.LFB40
 1949 0050 00000000 		.4byte	.LFB41
 1950 0054 2E000000 		.4byte	.LFE41-.LFB41
 1951 0058 00000000 		.4byte	.LFB42
 1952 005c 48000000 		.4byte	.LFE42-.LFB42
 1953 0060 00000000 		.4byte	0
 1954 0064 00000000 		.4byte	0
 1955              		.section	.debug_ranges,"",%progbits
 1956              	.Ldebug_ranges0:
 1957 0000 00000000 		.4byte	.LFB33
 1958 0004 C8010000 		.4byte	.LFE33
 1959 0008 00000000 		.4byte	.LFB34
 1960 000c C8010000 		.4byte	.LFE34
 1961 0010 00000000 		.4byte	.LFB35
 1962 0014 40000000 		.4byte	.LFE35
 1963 0018 00000000 		.4byte	.LFB36
 1964 001c B8000000 		.4byte	.LFE36
 1965 0020 00000000 		.4byte	.LFB37
 1966 0024 80000000 		.4byte	.LFE37
 1967 0028 00000000 		.4byte	.LFB38
 1968 002c 50000000 		.4byte	.LFE38
 1969 0030 00000000 		.4byte	.LFB39
 1970 0034 6C000000 		.4byte	.LFE39
 1971 0038 00000000 		.4byte	.LFB40
 1972 003c 60000000 		.4byte	.LFE40
 1973 0040 00000000 		.4byte	.LFB41
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 42


 1974 0044 2E000000 		.4byte	.LFE41
 1975 0048 00000000 		.4byte	.LFB42
 1976 004c 48000000 		.4byte	.LFE42
 1977 0050 00000000 		.4byte	0
 1978 0054 00000000 		.4byte	0
 1979              		.section	.debug_line,"",%progbits
 1980              	.Ldebug_line0:
 1981 0000 B5010000 		.section	.debug_str,"MS",%progbits,1
 1981      02006800 
 1981      00000201 
 1981      FB0E0D00 
 1981      01010101 
 1982              	.LASF31:
 1983 0000 62616467 		.ascii	"badge_state\000"
 1983      655F7374 
 1983      61746500 
 1984              	.LASF28:
 1985 000c 6765745F 		.ascii	"get_magic_toggle_sequance\000"
 1985      6D616769 
 1985      635F746F 
 1985      67676C65 
 1985      5F736571 
 1986              	.LASF27:
 1987 0026 76616C75 		.ascii	"value\000"
 1987      6500
 1988              	.LASF34:
 1989 002c 53756273 		.ascii	"Substitution_Sequence\000"
 1989      74697475 
 1989      74696F6E 
 1989      5F536571 
 1989      75656E63 
 1990              	.LASF18:
 1991 0042 5357525F 		.ascii	"SWR_Handler\000"
 1991      48616E64 
 1991      6C657200 
 1992              	.LASF3:
 1993 004e 73686F72 		.ascii	"short unsigned int\000"
 1993      7420756E 
 1993      7369676E 
 1993      65642069 
 1993      6E7400
 1994              	.LASF35:
 1995 0061 4F726761 		.ascii	"Organizer_Sequence\000"
 1995      6E697A65 
 1995      725F5365 
 1995      7175656E 
 1995      636500
 1996              	.LASF20:
 1997 0074 63757272 		.ascii	"current_color_left\000"
 1997      656E745F 
 1997      636F6C6F 
 1997      725F6C65 
 1997      667400
 1998              	.LASF30:
 1999 0087 696E6974 		.ascii	"init_magic_toggle_sequance\000"
 1999      5F6D6167 
 1999      69635F74 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 43


 1999      6F67676C 
 1999      655F7365 
 2000              	.LASF23:
 2001 00a2 72616E64 		.ascii	"rand_num_right\000"
 2001      5F6E756D 
 2001      5F726967 
 2001      687400
 2002              	.LASF11:
 2003 00b1 666C6F61 		.ascii	"float\000"
 2003      7400
 2004              	.LASF36:
 2005 00b7 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2005      4320342E 
 2005      382E3420 
 2005      32303134 
 2005      30353236 
 2006 00ea 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2006      20726576 
 2006      6973696F 
 2006      6E203231 
 2006      31333538 
 2007 011d 30202D66 		.ascii	"0 -ffunction-sections\000"
 2007      66756E63 
 2007      74696F6E 
 2007      2D736563 
 2007      74696F6E 
 2008              	.LASF1:
 2009 0133 756E7369 		.ascii	"unsigned char\000"
 2009      676E6564 
 2009      20636861 
 2009      7200
 2010              	.LASF5:
 2011 0141 6C6F6E67 		.ascii	"long unsigned int\000"
 2011      20756E73 
 2011      69676E65 
 2011      6420696E 
 2011      7400
 2012              	.LASF9:
 2013 0153 75696E74 		.ascii	"uint8\000"
 2013      3800
 2014              	.LASF21:
 2015 0159 63757272 		.ascii	"current_color_right\000"
 2015      656E745F 
 2015      636F6C6F 
 2015      725F7269 
 2015      67687400 
 2016              	.LASF25:
 2017 016d 73746174 		.ascii	"state_flag\000"
 2017      655F666C 
 2017      616700
 2018              	.LASF32:
 2019 0178 4D6F7273 		.ascii	"Morse_Sequence\000"
 2019      655F5365 
 2019      7175656E 
 2019      636500
 2020              	.LASF12:
 2021 0187 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 44


 2021      6C6500
 2022              	.LASF37:
 2023 018e 2E5C746F 		.ascii	".\\togglelib.c\000"
 2023      67676C65 
 2023      6C69622E 
 2023      6300
 2024              	.LASF26:
 2025 019c 7365745F 		.ascii	"set_magic_toggle_index\000"
 2025      6D616769 
 2025      635F746F 
 2025      67676C65 
 2025      5F696E64 
 2026              	.LASF10:
 2027 01b3 75696E74 		.ascii	"uint32\000"
 2027      333200
 2028              	.LASF8:
 2029 01ba 756E7369 		.ascii	"unsigned int\000"
 2029      676E6564 
 2029      20696E74 
 2029      00
 2030              	.LASF24:
 2031 01c7 7365745F 		.ascii	"set_magic_toggle_sequance\000"
 2031      6D616769 
 2031      635F746F 
 2031      67676C65 
 2031      5F736571 
 2032              	.LASF7:
 2033 01e1 6C6F6E67 		.ascii	"long long unsigned int\000"
 2033      206C6F6E 
 2033      6720756E 
 2033      7369676E 
 2033      65642069 
 2034              	.LASF39:
 2035 01f8 4D616769 		.ascii	"Magic_Toggle_Sequence\000"
 2035      635F546F 
 2035      67676C65 
 2035      5F536571 
 2035      75656E63 
 2036              	.LASF41:
 2037 020e 656E6162 		.ascii	"enable_toggle_interrupts\000"
 2037      6C655F74 
 2037      6F67676C 
 2037      655F696E 
 2037      74657272 
 2038              	.LASF33:
 2039 0227 42696E61 		.ascii	"Binary_Sequence\000"
 2039      72795F53 
 2039      65717565 
 2039      6E636500 
 2040              	.LASF22:
 2041 0237 72616E64 		.ascii	"rand_num_left\000"
 2041      5F6E756D 
 2041      5F6C6566 
 2041      7400
 2042              	.LASF14:
 2043 0245 73697A65 		.ascii	"sizetype\000"
 2043      74797065 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 45


 2043      00
 2044              	.LASF15:
 2045 024e 73657175 		.ascii	"sequance\000"
 2045      616E6365 
 2045      00
 2046              	.LASF6:
 2047 0257 6C6F6E67 		.ascii	"long long int\000"
 2047      206C6F6E 
 2047      6720696E 
 2047      7400
 2048              	.LASF13:
 2049 0265 63686172 		.ascii	"char\000"
 2049      00
 2050              	.LASF16:
 2051 026a 696E6465 		.ascii	"index\000"
 2051      7800
 2052              	.LASF2:
 2053 0270 73686F72 		.ascii	"short int\000"
 2053      7420696E 
 2053      7400
 2054              	.LASF17:
 2055 027a 53574C5F 		.ascii	"SWL_Handler\000"
 2055      48616E64 
 2055      6C657200 
 2056              	.LASF19:
 2057 0286 4F52475F 		.ascii	"ORG_Handler\000"
 2057      48616E64 
 2057      6C657200 
 2058              	.LASF4:
 2059 0292 6C6F6E67 		.ascii	"long int\000"
 2059      20696E74 
 2059      00
 2060              	.LASF38:
 2061 029b 433A5C55 		.ascii	"C:\\Users\\Admin\\Desktop\\Student Badge\\Student_B"
 2061      73657273 
 2061      5C41646D 
 2061      696E5C44 
 2061      65736B74 
 2062 02c9 61646765 		.ascii	"adge\\Student_Badge.cydsn\000"
 2062      5C537475 
 2062      64656E74 
 2062      5F426164 
 2062      67652E63 
 2063              	.LASF0:
 2064 02e2 7369676E 		.ascii	"signed char\000"
 2064      65642063 
 2064      68617200 
 2065              	.LASF40:
 2066 02ee 5357425F 		.ascii	"SWB_Handler\000"
 2066      48616E64 
 2066      6C657200 
 2067              	.LASF29:
 2068 02fa 6765745F 		.ascii	"get_magic_toggle_index\000"
 2068      6D616769 
 2068      635F746F 
 2068      67676C65 
 2068      5F696E64 
ARM GAS  C:\Users\Admin\AppData\Local\Temp\ccKwEUep.s 			page 46


 2069              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
